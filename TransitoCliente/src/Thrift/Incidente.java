/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-16")
public class Incidente implements org.apache.thrift.TBase<Incidente, Incidente._Fields>, java.io.Serializable, Cloneable, Comparable<Incidente> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Incidente");

  private static final org.apache.thrift.protocol.TField ID_INCIDENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idIncidente", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CIUDAD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciudad", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FECHA_FIELD_DESC = new org.apache.thrift.protocol.TField("fecha", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HORA_FIELD_DESC = new org.apache.thrift.protocol.TField("hora", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ESTADO_FIELD_DESC = new org.apache.thrift.protocol.TField("estado", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IncidenteStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IncidenteTupleSchemeFactory();

  public int idIncidente; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ciudad; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fecha; // required
  public int hora; // required
  public int estado; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_INCIDENTE((short)1, "idIncidente"),
    CIUDAD((short)2, "ciudad"),
    FECHA((short)4, "fecha"),
    HORA((short)5, "hora"),
    ESTADO((short)6, "estado");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_INCIDENTE
          return ID_INCIDENTE;
        case 2: // CIUDAD
          return CIUDAD;
        case 4: // FECHA
          return FECHA;
        case 5: // HORA
          return HORA;
        case 6: // ESTADO
          return ESTADO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDINCIDENTE_ISSET_ID = 0;
  private static final int __HORA_ISSET_ID = 1;
  private static final int __ESTADO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_INCIDENTE, new org.apache.thrift.meta_data.FieldMetaData("idIncidente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CIUDAD, new org.apache.thrift.meta_data.FieldMetaData("ciudad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FECHA, new org.apache.thrift.meta_data.FieldMetaData("fecha", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HORA, new org.apache.thrift.meta_data.FieldMetaData("hora", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESTADO, new org.apache.thrift.meta_data.FieldMetaData("estado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Incidente.class, metaDataMap);
  }

  public Incidente() {
  }

  public Incidente(
    int idIncidente,
    java.lang.String ciudad,
    java.lang.String fecha,
    int hora,
    int estado)
  {
    this();
    this.idIncidente = idIncidente;
    setIdIncidenteIsSet(true);
    this.ciudad = ciudad;
    this.fecha = fecha;
    this.hora = hora;
    setHoraIsSet(true);
    this.estado = estado;
    setEstadoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Incidente(Incidente other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idIncidente = other.idIncidente;
    if (other.isSetCiudad()) {
      this.ciudad = other.ciudad;
    }
    if (other.isSetFecha()) {
      this.fecha = other.fecha;
    }
    this.hora = other.hora;
    this.estado = other.estado;
  }

  public Incidente deepCopy() {
    return new Incidente(this);
  }

  @Override
  public void clear() {
    setIdIncidenteIsSet(false);
    this.idIncidente = 0;
    this.ciudad = null;
    this.fecha = null;
    setHoraIsSet(false);
    this.hora = 0;
    setEstadoIsSet(false);
    this.estado = 0;
  }

  public int getIdIncidente() {
    return this.idIncidente;
  }

  public Incidente setIdIncidente(int idIncidente) {
    this.idIncidente = idIncidente;
    setIdIncidenteIsSet(true);
    return this;
  }

  public void unsetIdIncidente() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDINCIDENTE_ISSET_ID);
  }

  /** Returns true if field idIncidente is set (has been assigned a value) and false otherwise */
  public boolean isSetIdIncidente() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDINCIDENTE_ISSET_ID);
  }

  public void setIdIncidenteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDINCIDENTE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCiudad() {
    return this.ciudad;
  }

  public Incidente setCiudad(@org.apache.thrift.annotation.Nullable java.lang.String ciudad) {
    this.ciudad = ciudad;
    return this;
  }

  public void unsetCiudad() {
    this.ciudad = null;
  }

  /** Returns true if field ciudad is set (has been assigned a value) and false otherwise */
  public boolean isSetCiudad() {
    return this.ciudad != null;
  }

  public void setCiudadIsSet(boolean value) {
    if (!value) {
      this.ciudad = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFecha() {
    return this.fecha;
  }

  public Incidente setFecha(@org.apache.thrift.annotation.Nullable java.lang.String fecha) {
    this.fecha = fecha;
    return this;
  }

  public void unsetFecha() {
    this.fecha = null;
  }

  /** Returns true if field fecha is set (has been assigned a value) and false otherwise */
  public boolean isSetFecha() {
    return this.fecha != null;
  }

  public void setFechaIsSet(boolean value) {
    if (!value) {
      this.fecha = null;
    }
  }

  public int getHora() {
    return this.hora;
  }

  public Incidente setHora(int hora) {
    this.hora = hora;
    setHoraIsSet(true);
    return this;
  }

  public void unsetHora() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HORA_ISSET_ID);
  }

  /** Returns true if field hora is set (has been assigned a value) and false otherwise */
  public boolean isSetHora() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HORA_ISSET_ID);
  }

  public void setHoraIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HORA_ISSET_ID, value);
  }

  public int getEstado() {
    return this.estado;
  }

  public Incidente setEstado(int estado) {
    this.estado = estado;
    setEstadoIsSet(true);
    return this;
  }

  public void unsetEstado() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESTADO_ISSET_ID);
  }

  /** Returns true if field estado is set (has been assigned a value) and false otherwise */
  public boolean isSetEstado() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESTADO_ISSET_ID);
  }

  public void setEstadoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESTADO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID_INCIDENTE:
      if (value == null) {
        unsetIdIncidente();
      } else {
        setIdIncidente((java.lang.Integer)value);
      }
      break;

    case CIUDAD:
      if (value == null) {
        unsetCiudad();
      } else {
        setCiudad((java.lang.String)value);
      }
      break;

    case FECHA:
      if (value == null) {
        unsetFecha();
      } else {
        setFecha((java.lang.String)value);
      }
      break;

    case HORA:
      if (value == null) {
        unsetHora();
      } else {
        setHora((java.lang.Integer)value);
      }
      break;

    case ESTADO:
      if (value == null) {
        unsetEstado();
      } else {
        setEstado((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_INCIDENTE:
      return getIdIncidente();

    case CIUDAD:
      return getCiudad();

    case FECHA:
      return getFecha();

    case HORA:
      return getHora();

    case ESTADO:
      return getEstado();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_INCIDENTE:
      return isSetIdIncidente();
    case CIUDAD:
      return isSetCiudad();
    case FECHA:
      return isSetFecha();
    case HORA:
      return isSetHora();
    case ESTADO:
      return isSetEstado();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Incidente)
      return this.equals((Incidente)that);
    return false;
  }

  public boolean equals(Incidente that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_idIncidente = true;
    boolean that_present_idIncidente = true;
    if (this_present_idIncidente || that_present_idIncidente) {
      if (!(this_present_idIncidente && that_present_idIncidente))
        return false;
      if (this.idIncidente != that.idIncidente)
        return false;
    }

    boolean this_present_ciudad = true && this.isSetCiudad();
    boolean that_present_ciudad = true && that.isSetCiudad();
    if (this_present_ciudad || that_present_ciudad) {
      if (!(this_present_ciudad && that_present_ciudad))
        return false;
      if (!this.ciudad.equals(that.ciudad))
        return false;
    }

    boolean this_present_fecha = true && this.isSetFecha();
    boolean that_present_fecha = true && that.isSetFecha();
    if (this_present_fecha || that_present_fecha) {
      if (!(this_present_fecha && that_present_fecha))
        return false;
      if (!this.fecha.equals(that.fecha))
        return false;
    }

    boolean this_present_hora = true;
    boolean that_present_hora = true;
    if (this_present_hora || that_present_hora) {
      if (!(this_present_hora && that_present_hora))
        return false;
      if (this.hora != that.hora)
        return false;
    }

    boolean this_present_estado = true;
    boolean that_present_estado = true;
    if (this_present_estado || that_present_estado) {
      if (!(this_present_estado && that_present_estado))
        return false;
      if (this.estado != that.estado)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + idIncidente;

    hashCode = hashCode * 8191 + ((isSetCiudad()) ? 131071 : 524287);
    if (isSetCiudad())
      hashCode = hashCode * 8191 + ciudad.hashCode();

    hashCode = hashCode * 8191 + ((isSetFecha()) ? 131071 : 524287);
    if (isSetFecha())
      hashCode = hashCode * 8191 + fecha.hashCode();

    hashCode = hashCode * 8191 + hora;

    hashCode = hashCode * 8191 + estado;

    return hashCode;
  }

  @Override
  public int compareTo(Incidente other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIdIncidente()).compareTo(other.isSetIdIncidente());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdIncidente()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idIncidente, other.idIncidente);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCiudad()).compareTo(other.isSetCiudad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCiudad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciudad, other.ciudad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFecha()).compareTo(other.isSetFecha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFecha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fecha, other.fecha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHora()).compareTo(other.isSetHora());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHora()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hora, other.hora);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEstado()).compareTo(other.isSetEstado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estado, other.estado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Incidente(");
    boolean first = true;

    sb.append("idIncidente:");
    sb.append(this.idIncidente);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ciudad:");
    if (this.ciudad == null) {
      sb.append("null");
    } else {
      sb.append(this.ciudad);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fecha:");
    if (this.fecha == null) {
      sb.append("null");
    } else {
      sb.append(this.fecha);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hora:");
    sb.append(this.hora);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estado:");
    sb.append(this.estado);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IncidenteStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IncidenteStandardScheme getScheme() {
      return new IncidenteStandardScheme();
    }
  }

  private static class IncidenteStandardScheme extends org.apache.thrift.scheme.StandardScheme<Incidente> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Incidente struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_INCIDENTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idIncidente = iprot.readI32();
              struct.setIdIncidenteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CIUDAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ciudad = iprot.readString();
              struct.setCiudadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FECHA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fecha = iprot.readString();
              struct.setFechaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HORA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hora = iprot.readI32();
              struct.setHoraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ESTADO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estado = iprot.readI32();
              struct.setEstadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Incidente struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_INCIDENTE_FIELD_DESC);
      oprot.writeI32(struct.idIncidente);
      oprot.writeFieldEnd();
      if (struct.ciudad != null) {
        oprot.writeFieldBegin(CIUDAD_FIELD_DESC);
        oprot.writeString(struct.ciudad);
        oprot.writeFieldEnd();
      }
      if (struct.fecha != null) {
        oprot.writeFieldBegin(FECHA_FIELD_DESC);
        oprot.writeString(struct.fecha);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HORA_FIELD_DESC);
      oprot.writeI32(struct.hora);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESTADO_FIELD_DESC);
      oprot.writeI32(struct.estado);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IncidenteTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IncidenteTupleScheme getScheme() {
      return new IncidenteTupleScheme();
    }
  }

  private static class IncidenteTupleScheme extends org.apache.thrift.scheme.TupleScheme<Incidente> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Incidente struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIdIncidente()) {
        optionals.set(0);
      }
      if (struct.isSetCiudad()) {
        optionals.set(1);
      }
      if (struct.isSetFecha()) {
        optionals.set(2);
      }
      if (struct.isSetHora()) {
        optionals.set(3);
      }
      if (struct.isSetEstado()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIdIncidente()) {
        oprot.writeI32(struct.idIncidente);
      }
      if (struct.isSetCiudad()) {
        oprot.writeString(struct.ciudad);
      }
      if (struct.isSetFecha()) {
        oprot.writeString(struct.fecha);
      }
      if (struct.isSetHora()) {
        oprot.writeI32(struct.hora);
      }
      if (struct.isSetEstado()) {
        oprot.writeI32(struct.estado);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Incidente struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.idIncidente = iprot.readI32();
        struct.setIdIncidenteIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ciudad = iprot.readString();
        struct.setCiudadIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fecha = iprot.readString();
        struct.setFechaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hora = iprot.readI32();
        struct.setHoraIsSet(true);
      }
      if (incoming.get(4)) {
        struct.estado = iprot.readI32();
        struct.setEstadoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


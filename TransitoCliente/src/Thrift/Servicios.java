/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-16")
public class Servicios {

  public interface Iface {

    public boolean validarCredenciales(java.lang.String usuario, java.lang.String contrasena) throws org.apache.thrift.TException;

    public void registrarUsuario(UsuarioClienteEscritorio usuario) throws org.apache.thrift.TException;

    public java.util.List<Incidente> recuperarIncidentes() throws org.apache.thrift.TException;

    public java.util.List<Reporte> recuperarReportes(int idIncidente) throws org.apache.thrift.TException;

    public Vehiculo recuperarVehiculoInvolucrado(int idVehiculo) throws org.apache.thrift.TException;

    public Conductor recuperarConductorInvolucrado(int idConductor) throws org.apache.thrift.TException;

    public java.util.List<Foto> recuperarFotosReportadas(int idReporte) throws org.apache.thrift.TException;

    public void dictaminarIncidente(Dictamen dic) throws org.apache.thrift.TException;

    public boolean validarUsuario(java.lang.String usuario) throws org.apache.thrift.TException;

    public boolean validarFolio(java.lang.String folio) throws org.apache.thrift.TException;

    public UsuarioClienteEscritorio recuperarUsuario(java.lang.String usuario) throws org.apache.thrift.TException;

    public void actualizarContrasena(int idUsuario, java.lang.String contrasena) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void validarCredenciales(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void registrarUsuario(UsuarioClienteEscritorio usuario, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void recuperarIncidentes(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Incidente>> resultHandler) throws org.apache.thrift.TException;

    public void recuperarReportes(int idIncidente, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException;

    public void recuperarVehiculoInvolucrado(int idVehiculo, org.apache.thrift.async.AsyncMethodCallback<Vehiculo> resultHandler) throws org.apache.thrift.TException;

    public void recuperarConductorInvolucrado(int idConductor, org.apache.thrift.async.AsyncMethodCallback<Conductor> resultHandler) throws org.apache.thrift.TException;

    public void recuperarFotosReportadas(int idReporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Foto>> resultHandler) throws org.apache.thrift.TException;

    public void dictaminarIncidente(Dictamen dic, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void validarUsuario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void validarFolio(java.lang.String folio, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void recuperarUsuario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<UsuarioClienteEscritorio> resultHandler) throws org.apache.thrift.TException;

    public void actualizarContrasena(int idUsuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean validarCredenciales(java.lang.String usuario, java.lang.String contrasena) throws org.apache.thrift.TException
    {
      send_validarCredenciales(usuario, contrasena);
      return recv_validarCredenciales();
    }

    public void send_validarCredenciales(java.lang.String usuario, java.lang.String contrasena) throws org.apache.thrift.TException
    {
      validarCredenciales_args args = new validarCredenciales_args();
      args.setUsuario(usuario);
      args.setContrasena(contrasena);
      sendBase("validarCredenciales", args);
    }

    public boolean recv_validarCredenciales() throws org.apache.thrift.TException
    {
      validarCredenciales_result result = new validarCredenciales_result();
      receiveBase(result, "validarCredenciales");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validarCredenciales failed: unknown result");
    }

    public void registrarUsuario(UsuarioClienteEscritorio usuario) throws org.apache.thrift.TException
    {
      send_registrarUsuario(usuario);
      recv_registrarUsuario();
    }

    public void send_registrarUsuario(UsuarioClienteEscritorio usuario) throws org.apache.thrift.TException
    {
      registrarUsuario_args args = new registrarUsuario_args();
      args.setUsuario(usuario);
      sendBase("registrarUsuario", args);
    }

    public void recv_registrarUsuario() throws org.apache.thrift.TException
    {
      registrarUsuario_result result = new registrarUsuario_result();
      receiveBase(result, "registrarUsuario");
      return;
    }

    public java.util.List<Incidente> recuperarIncidentes() throws org.apache.thrift.TException
    {
      send_recuperarIncidentes();
      return recv_recuperarIncidentes();
    }

    public void send_recuperarIncidentes() throws org.apache.thrift.TException
    {
      recuperarIncidentes_args args = new recuperarIncidentes_args();
      sendBase("recuperarIncidentes", args);
    }

    public java.util.List<Incidente> recv_recuperarIncidentes() throws org.apache.thrift.TException
    {
      recuperarIncidentes_result result = new recuperarIncidentes_result();
      receiveBase(result, "recuperarIncidentes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperarIncidentes failed: unknown result");
    }

    public java.util.List<Reporte> recuperarReportes(int idIncidente) throws org.apache.thrift.TException
    {
      send_recuperarReportes(idIncidente);
      return recv_recuperarReportes();
    }

    public void send_recuperarReportes(int idIncidente) throws org.apache.thrift.TException
    {
      recuperarReportes_args args = new recuperarReportes_args();
      args.setIdIncidente(idIncidente);
      sendBase("recuperarReportes", args);
    }

    public java.util.List<Reporte> recv_recuperarReportes() throws org.apache.thrift.TException
    {
      recuperarReportes_result result = new recuperarReportes_result();
      receiveBase(result, "recuperarReportes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperarReportes failed: unknown result");
    }

    public Vehiculo recuperarVehiculoInvolucrado(int idVehiculo) throws org.apache.thrift.TException
    {
      send_recuperarVehiculoInvolucrado(idVehiculo);
      return recv_recuperarVehiculoInvolucrado();
    }

    public void send_recuperarVehiculoInvolucrado(int idVehiculo) throws org.apache.thrift.TException
    {
      recuperarVehiculoInvolucrado_args args = new recuperarVehiculoInvolucrado_args();
      args.setIdVehiculo(idVehiculo);
      sendBase("recuperarVehiculoInvolucrado", args);
    }

    public Vehiculo recv_recuperarVehiculoInvolucrado() throws org.apache.thrift.TException
    {
      recuperarVehiculoInvolucrado_result result = new recuperarVehiculoInvolucrado_result();
      receiveBase(result, "recuperarVehiculoInvolucrado");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperarVehiculoInvolucrado failed: unknown result");
    }

    public Conductor recuperarConductorInvolucrado(int idConductor) throws org.apache.thrift.TException
    {
      send_recuperarConductorInvolucrado(idConductor);
      return recv_recuperarConductorInvolucrado();
    }

    public void send_recuperarConductorInvolucrado(int idConductor) throws org.apache.thrift.TException
    {
      recuperarConductorInvolucrado_args args = new recuperarConductorInvolucrado_args();
      args.setIdConductor(idConductor);
      sendBase("recuperarConductorInvolucrado", args);
    }

    public Conductor recv_recuperarConductorInvolucrado() throws org.apache.thrift.TException
    {
      recuperarConductorInvolucrado_result result = new recuperarConductorInvolucrado_result();
      receiveBase(result, "recuperarConductorInvolucrado");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperarConductorInvolucrado failed: unknown result");
    }

    public java.util.List<Foto> recuperarFotosReportadas(int idReporte) throws org.apache.thrift.TException
    {
      send_recuperarFotosReportadas(idReporte);
      return recv_recuperarFotosReportadas();
    }

    public void send_recuperarFotosReportadas(int idReporte) throws org.apache.thrift.TException
    {
      recuperarFotosReportadas_args args = new recuperarFotosReportadas_args();
      args.setIdReporte(idReporte);
      sendBase("recuperarFotosReportadas", args);
    }

    public java.util.List<Foto> recv_recuperarFotosReportadas() throws org.apache.thrift.TException
    {
      recuperarFotosReportadas_result result = new recuperarFotosReportadas_result();
      receiveBase(result, "recuperarFotosReportadas");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperarFotosReportadas failed: unknown result");
    }

    public void dictaminarIncidente(Dictamen dic) throws org.apache.thrift.TException
    {
      send_dictaminarIncidente(dic);
      recv_dictaminarIncidente();
    }

    public void send_dictaminarIncidente(Dictamen dic) throws org.apache.thrift.TException
    {
      dictaminarIncidente_args args = new dictaminarIncidente_args();
      args.setDic(dic);
      sendBase("dictaminarIncidente", args);
    }

    public void recv_dictaminarIncidente() throws org.apache.thrift.TException
    {
      dictaminarIncidente_result result = new dictaminarIncidente_result();
      receiveBase(result, "dictaminarIncidente");
      return;
    }

    public boolean validarUsuario(java.lang.String usuario) throws org.apache.thrift.TException
    {
      send_validarUsuario(usuario);
      return recv_validarUsuario();
    }

    public void send_validarUsuario(java.lang.String usuario) throws org.apache.thrift.TException
    {
      validarUsuario_args args = new validarUsuario_args();
      args.setUsuario(usuario);
      sendBase("validarUsuario", args);
    }

    public boolean recv_validarUsuario() throws org.apache.thrift.TException
    {
      validarUsuario_result result = new validarUsuario_result();
      receiveBase(result, "validarUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validarUsuario failed: unknown result");
    }

    public boolean validarFolio(java.lang.String folio) throws org.apache.thrift.TException
    {
      send_validarFolio(folio);
      return recv_validarFolio();
    }

    public void send_validarFolio(java.lang.String folio) throws org.apache.thrift.TException
    {
      validarFolio_args args = new validarFolio_args();
      args.setFolio(folio);
      sendBase("validarFolio", args);
    }

    public boolean recv_validarFolio() throws org.apache.thrift.TException
    {
      validarFolio_result result = new validarFolio_result();
      receiveBase(result, "validarFolio");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validarFolio failed: unknown result");
    }

    public UsuarioClienteEscritorio recuperarUsuario(java.lang.String usuario) throws org.apache.thrift.TException
    {
      send_recuperarUsuario(usuario);
      return recv_recuperarUsuario();
    }

    public void send_recuperarUsuario(java.lang.String usuario) throws org.apache.thrift.TException
    {
      recuperarUsuario_args args = new recuperarUsuario_args();
      args.setUsuario(usuario);
      sendBase("recuperarUsuario", args);
    }

    public UsuarioClienteEscritorio recv_recuperarUsuario() throws org.apache.thrift.TException
    {
      recuperarUsuario_result result = new recuperarUsuario_result();
      receiveBase(result, "recuperarUsuario");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recuperarUsuario failed: unknown result");
    }

    public void actualizarContrasena(int idUsuario, java.lang.String contrasena) throws org.apache.thrift.TException
    {
      send_actualizarContrasena(idUsuario, contrasena);
      recv_actualizarContrasena();
    }

    public void send_actualizarContrasena(int idUsuario, java.lang.String contrasena) throws org.apache.thrift.TException
    {
      actualizarContrasena_args args = new actualizarContrasena_args();
      args.setIdUsuario(idUsuario);
      args.setContrasena(contrasena);
      sendBase("actualizarContrasena", args);
    }

    public void recv_actualizarContrasena() throws org.apache.thrift.TException
    {
      actualizarContrasena_result result = new actualizarContrasena_result();
      receiveBase(result, "actualizarContrasena");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void validarCredenciales(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validarCredenciales_call method_call = new validarCredenciales_call(usuario, contrasena, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validarCredenciales_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String usuario;
      private java.lang.String contrasena;
      public validarCredenciales_call(java.lang.String usuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
        this.contrasena = contrasena;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validarCredenciales", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validarCredenciales_args args = new validarCredenciales_args();
        args.setUsuario(usuario);
        args.setContrasena(contrasena);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validarCredenciales();
      }
    }

    public void registrarUsuario(UsuarioClienteEscritorio usuario, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registrarUsuario_call method_call = new registrarUsuario_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registrarUsuario_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private UsuarioClienteEscritorio usuario;
      public registrarUsuario_call(UsuarioClienteEscritorio usuario, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registrarUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registrarUsuario_args args = new registrarUsuario_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void recuperarIncidentes(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Incidente>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarIncidentes_call method_call = new recuperarIncidentes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarIncidentes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Incidente>> {
      public recuperarIncidentes_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Incidente>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarIncidentes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarIncidentes_args args = new recuperarIncidentes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Incidente> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperarIncidentes();
      }
    }

    public void recuperarReportes(int idIncidente, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarReportes_call method_call = new recuperarReportes_call(idIncidente, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarReportes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Reporte>> {
      private int idIncidente;
      public recuperarReportes_call(int idIncidente, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idIncidente = idIncidente;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarReportes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarReportes_args args = new recuperarReportes_args();
        args.setIdIncidente(idIncidente);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Reporte> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperarReportes();
      }
    }

    public void recuperarVehiculoInvolucrado(int idVehiculo, org.apache.thrift.async.AsyncMethodCallback<Vehiculo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarVehiculoInvolucrado_call method_call = new recuperarVehiculoInvolucrado_call(idVehiculo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarVehiculoInvolucrado_call extends org.apache.thrift.async.TAsyncMethodCall<Vehiculo> {
      private int idVehiculo;
      public recuperarVehiculoInvolucrado_call(int idVehiculo, org.apache.thrift.async.AsyncMethodCallback<Vehiculo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idVehiculo = idVehiculo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarVehiculoInvolucrado", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarVehiculoInvolucrado_args args = new recuperarVehiculoInvolucrado_args();
        args.setIdVehiculo(idVehiculo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vehiculo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperarVehiculoInvolucrado();
      }
    }

    public void recuperarConductorInvolucrado(int idConductor, org.apache.thrift.async.AsyncMethodCallback<Conductor> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarConductorInvolucrado_call method_call = new recuperarConductorInvolucrado_call(idConductor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarConductorInvolucrado_call extends org.apache.thrift.async.TAsyncMethodCall<Conductor> {
      private int idConductor;
      public recuperarConductorInvolucrado_call(int idConductor, org.apache.thrift.async.AsyncMethodCallback<Conductor> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idConductor = idConductor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarConductorInvolucrado", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarConductorInvolucrado_args args = new recuperarConductorInvolucrado_args();
        args.setIdConductor(idConductor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Conductor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperarConductorInvolucrado();
      }
    }

    public void recuperarFotosReportadas(int idReporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Foto>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarFotosReportadas_call method_call = new recuperarFotosReportadas_call(idReporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarFotosReportadas_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Foto>> {
      private int idReporte;
      public recuperarFotosReportadas_call(int idReporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Foto>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idReporte = idReporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarFotosReportadas", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarFotosReportadas_args args = new recuperarFotosReportadas_args();
        args.setIdReporte(idReporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Foto> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperarFotosReportadas();
      }
    }

    public void dictaminarIncidente(Dictamen dic, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dictaminarIncidente_call method_call = new dictaminarIncidente_call(dic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dictaminarIncidente_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Dictamen dic;
      public dictaminarIncidente_call(Dictamen dic, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dic = dic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dictaminarIncidente", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dictaminarIncidente_args args = new dictaminarIncidente_args();
        args.setDic(dic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void validarUsuario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validarUsuario_call method_call = new validarUsuario_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validarUsuario_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String usuario;
      public validarUsuario_call(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validarUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validarUsuario_args args = new validarUsuario_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validarUsuario();
      }
    }

    public void validarFolio(java.lang.String folio, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validarFolio_call method_call = new validarFolio_call(folio, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validarFolio_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String folio;
      public validarFolio_call(java.lang.String folio, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.folio = folio;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validarFolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validarFolio_args args = new validarFolio_args();
        args.setFolio(folio);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validarFolio();
      }
    }

    public void recuperarUsuario(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<UsuarioClienteEscritorio> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recuperarUsuario_call method_call = new recuperarUsuario_call(usuario, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recuperarUsuario_call extends org.apache.thrift.async.TAsyncMethodCall<UsuarioClienteEscritorio> {
      private java.lang.String usuario;
      public recuperarUsuario_call(java.lang.String usuario, org.apache.thrift.async.AsyncMethodCallback<UsuarioClienteEscritorio> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usuario = usuario;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recuperarUsuario", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recuperarUsuario_args args = new recuperarUsuario_args();
        args.setUsuario(usuario);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UsuarioClienteEscritorio getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recuperarUsuario();
      }
    }

    public void actualizarContrasena(int idUsuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      actualizarContrasena_call method_call = new actualizarContrasena_call(idUsuario, contrasena, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class actualizarContrasena_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int idUsuario;
      private java.lang.String contrasena;
      public actualizarContrasena_call(int idUsuario, java.lang.String contrasena, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idUsuario = idUsuario;
        this.contrasena = contrasena;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("actualizarContrasena", org.apache.thrift.protocol.TMessageType.CALL, 0));
        actualizarContrasena_args args = new actualizarContrasena_args();
        args.setIdUsuario(idUsuario);
        args.setContrasena(contrasena);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("validarCredenciales", new validarCredenciales());
      processMap.put("registrarUsuario", new registrarUsuario());
      processMap.put("recuperarIncidentes", new recuperarIncidentes());
      processMap.put("recuperarReportes", new recuperarReportes());
      processMap.put("recuperarVehiculoInvolucrado", new recuperarVehiculoInvolucrado());
      processMap.put("recuperarConductorInvolucrado", new recuperarConductorInvolucrado());
      processMap.put("recuperarFotosReportadas", new recuperarFotosReportadas());
      processMap.put("dictaminarIncidente", new dictaminarIncidente());
      processMap.put("validarUsuario", new validarUsuario());
      processMap.put("validarFolio", new validarFolio());
      processMap.put("recuperarUsuario", new recuperarUsuario());
      processMap.put("actualizarContrasena", new actualizarContrasena());
      return processMap;
    }

    public static class validarCredenciales<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validarCredenciales_args> {
      public validarCredenciales() {
        super("validarCredenciales");
      }

      public validarCredenciales_args getEmptyArgsInstance() {
        return new validarCredenciales_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public validarCredenciales_result getResult(I iface, validarCredenciales_args args) throws org.apache.thrift.TException {
        validarCredenciales_result result = new validarCredenciales_result();
        result.success = iface.validarCredenciales(args.usuario, args.contrasena);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class registrarUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registrarUsuario_args> {
      public registrarUsuario() {
        super("registrarUsuario");
      }

      public registrarUsuario_args getEmptyArgsInstance() {
        return new registrarUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public registrarUsuario_result getResult(I iface, registrarUsuario_args args) throws org.apache.thrift.TException {
        registrarUsuario_result result = new registrarUsuario_result();
        iface.registrarUsuario(args.usuario);
        return result;
      }
    }

    public static class recuperarIncidentes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarIncidentes_args> {
      public recuperarIncidentes() {
        super("recuperarIncidentes");
      }

      public recuperarIncidentes_args getEmptyArgsInstance() {
        return new recuperarIncidentes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public recuperarIncidentes_result getResult(I iface, recuperarIncidentes_args args) throws org.apache.thrift.TException {
        recuperarIncidentes_result result = new recuperarIncidentes_result();
        result.success = iface.recuperarIncidentes();
        return result;
      }
    }

    public static class recuperarReportes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarReportes_args> {
      public recuperarReportes() {
        super("recuperarReportes");
      }

      public recuperarReportes_args getEmptyArgsInstance() {
        return new recuperarReportes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public recuperarReportes_result getResult(I iface, recuperarReportes_args args) throws org.apache.thrift.TException {
        recuperarReportes_result result = new recuperarReportes_result();
        result.success = iface.recuperarReportes(args.idIncidente);
        return result;
      }
    }

    public static class recuperarVehiculoInvolucrado<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarVehiculoInvolucrado_args> {
      public recuperarVehiculoInvolucrado() {
        super("recuperarVehiculoInvolucrado");
      }

      public recuperarVehiculoInvolucrado_args getEmptyArgsInstance() {
        return new recuperarVehiculoInvolucrado_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public recuperarVehiculoInvolucrado_result getResult(I iface, recuperarVehiculoInvolucrado_args args) throws org.apache.thrift.TException {
        recuperarVehiculoInvolucrado_result result = new recuperarVehiculoInvolucrado_result();
        result.success = iface.recuperarVehiculoInvolucrado(args.idVehiculo);
        return result;
      }
    }

    public static class recuperarConductorInvolucrado<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarConductorInvolucrado_args> {
      public recuperarConductorInvolucrado() {
        super("recuperarConductorInvolucrado");
      }

      public recuperarConductorInvolucrado_args getEmptyArgsInstance() {
        return new recuperarConductorInvolucrado_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public recuperarConductorInvolucrado_result getResult(I iface, recuperarConductorInvolucrado_args args) throws org.apache.thrift.TException {
        recuperarConductorInvolucrado_result result = new recuperarConductorInvolucrado_result();
        result.success = iface.recuperarConductorInvolucrado(args.idConductor);
        return result;
      }
    }

    public static class recuperarFotosReportadas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarFotosReportadas_args> {
      public recuperarFotosReportadas() {
        super("recuperarFotosReportadas");
      }

      public recuperarFotosReportadas_args getEmptyArgsInstance() {
        return new recuperarFotosReportadas_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public recuperarFotosReportadas_result getResult(I iface, recuperarFotosReportadas_args args) throws org.apache.thrift.TException {
        recuperarFotosReportadas_result result = new recuperarFotosReportadas_result();
        result.success = iface.recuperarFotosReportadas(args.idReporte);
        return result;
      }
    }

    public static class dictaminarIncidente<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dictaminarIncidente_args> {
      public dictaminarIncidente() {
        super("dictaminarIncidente");
      }

      public dictaminarIncidente_args getEmptyArgsInstance() {
        return new dictaminarIncidente_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public dictaminarIncidente_result getResult(I iface, dictaminarIncidente_args args) throws org.apache.thrift.TException {
        dictaminarIncidente_result result = new dictaminarIncidente_result();
        iface.dictaminarIncidente(args.dic);
        return result;
      }
    }

    public static class validarUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validarUsuario_args> {
      public validarUsuario() {
        super("validarUsuario");
      }

      public validarUsuario_args getEmptyArgsInstance() {
        return new validarUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public validarUsuario_result getResult(I iface, validarUsuario_args args) throws org.apache.thrift.TException {
        validarUsuario_result result = new validarUsuario_result();
        result.success = iface.validarUsuario(args.usuario);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class validarFolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validarFolio_args> {
      public validarFolio() {
        super("validarFolio");
      }

      public validarFolio_args getEmptyArgsInstance() {
        return new validarFolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public validarFolio_result getResult(I iface, validarFolio_args args) throws org.apache.thrift.TException {
        validarFolio_result result = new validarFolio_result();
        result.success = iface.validarFolio(args.folio);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class recuperarUsuario<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recuperarUsuario_args> {
      public recuperarUsuario() {
        super("recuperarUsuario");
      }

      public recuperarUsuario_args getEmptyArgsInstance() {
        return new recuperarUsuario_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public recuperarUsuario_result getResult(I iface, recuperarUsuario_args args) throws org.apache.thrift.TException {
        recuperarUsuario_result result = new recuperarUsuario_result();
        result.success = iface.recuperarUsuario(args.usuario);
        return result;
      }
    }

    public static class actualizarContrasena<I extends Iface> extends org.apache.thrift.ProcessFunction<I, actualizarContrasena_args> {
      public actualizarContrasena() {
        super("actualizarContrasena");
      }

      public actualizarContrasena_args getEmptyArgsInstance() {
        return new actualizarContrasena_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public actualizarContrasena_result getResult(I iface, actualizarContrasena_args args) throws org.apache.thrift.TException {
        actualizarContrasena_result result = new actualizarContrasena_result();
        iface.actualizarContrasena(args.idUsuario, args.contrasena);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("validarCredenciales", new validarCredenciales());
      processMap.put("registrarUsuario", new registrarUsuario());
      processMap.put("recuperarIncidentes", new recuperarIncidentes());
      processMap.put("recuperarReportes", new recuperarReportes());
      processMap.put("recuperarVehiculoInvolucrado", new recuperarVehiculoInvolucrado());
      processMap.put("recuperarConductorInvolucrado", new recuperarConductorInvolucrado());
      processMap.put("recuperarFotosReportadas", new recuperarFotosReportadas());
      processMap.put("dictaminarIncidente", new dictaminarIncidente());
      processMap.put("validarUsuario", new validarUsuario());
      processMap.put("validarFolio", new validarFolio());
      processMap.put("recuperarUsuario", new recuperarUsuario());
      processMap.put("actualizarContrasena", new actualizarContrasena());
      return processMap;
    }

    public static class validarCredenciales<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validarCredenciales_args, java.lang.Boolean> {
      public validarCredenciales() {
        super("validarCredenciales");
      }

      public validarCredenciales_args getEmptyArgsInstance() {
        return new validarCredenciales_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            validarCredenciales_result result = new validarCredenciales_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            validarCredenciales_result result = new validarCredenciales_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validarCredenciales_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.validarCredenciales(args.usuario, args.contrasena,resultHandler);
      }
    }

    public static class registrarUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registrarUsuario_args, Void> {
      public registrarUsuario() {
        super("registrarUsuario");
      }

      public registrarUsuario_args getEmptyArgsInstance() {
        return new registrarUsuario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registrarUsuario_result result = new registrarUsuario_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registrarUsuario_result result = new registrarUsuario_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registrarUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.registrarUsuario(args.usuario,resultHandler);
      }
    }

    public static class recuperarIncidentes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarIncidentes_args, java.util.List<Incidente>> {
      public recuperarIncidentes() {
        super("recuperarIncidentes");
      }

      public recuperarIncidentes_args getEmptyArgsInstance() {
        return new recuperarIncidentes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Incidente>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Incidente>>() { 
          public void onComplete(java.util.List<Incidente> o) {
            recuperarIncidentes_result result = new recuperarIncidentes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarIncidentes_result result = new recuperarIncidentes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarIncidentes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Incidente>> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarIncidentes(resultHandler);
      }
    }

    public static class recuperarReportes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarReportes_args, java.util.List<Reporte>> {
      public recuperarReportes() {
        super("recuperarReportes");
      }

      public recuperarReportes_args getEmptyArgsInstance() {
        return new recuperarReportes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>>() { 
          public void onComplete(java.util.List<Reporte> o) {
            recuperarReportes_result result = new recuperarReportes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarReportes_result result = new recuperarReportes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarReportes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Reporte>> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarReportes(args.idIncidente,resultHandler);
      }
    }

    public static class recuperarVehiculoInvolucrado<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarVehiculoInvolucrado_args, Vehiculo> {
      public recuperarVehiculoInvolucrado() {
        super("recuperarVehiculoInvolucrado");
      }

      public recuperarVehiculoInvolucrado_args getEmptyArgsInstance() {
        return new recuperarVehiculoInvolucrado_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Vehiculo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Vehiculo>() { 
          public void onComplete(Vehiculo o) {
            recuperarVehiculoInvolucrado_result result = new recuperarVehiculoInvolucrado_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarVehiculoInvolucrado_result result = new recuperarVehiculoInvolucrado_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarVehiculoInvolucrado_args args, org.apache.thrift.async.AsyncMethodCallback<Vehiculo> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarVehiculoInvolucrado(args.idVehiculo,resultHandler);
      }
    }

    public static class recuperarConductorInvolucrado<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarConductorInvolucrado_args, Conductor> {
      public recuperarConductorInvolucrado() {
        super("recuperarConductorInvolucrado");
      }

      public recuperarConductorInvolucrado_args getEmptyArgsInstance() {
        return new recuperarConductorInvolucrado_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Conductor> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Conductor>() { 
          public void onComplete(Conductor o) {
            recuperarConductorInvolucrado_result result = new recuperarConductorInvolucrado_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarConductorInvolucrado_result result = new recuperarConductorInvolucrado_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarConductorInvolucrado_args args, org.apache.thrift.async.AsyncMethodCallback<Conductor> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarConductorInvolucrado(args.idConductor,resultHandler);
      }
    }

    public static class recuperarFotosReportadas<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarFotosReportadas_args, java.util.List<Foto>> {
      public recuperarFotosReportadas() {
        super("recuperarFotosReportadas");
      }

      public recuperarFotosReportadas_args getEmptyArgsInstance() {
        return new recuperarFotosReportadas_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Foto>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Foto>>() { 
          public void onComplete(java.util.List<Foto> o) {
            recuperarFotosReportadas_result result = new recuperarFotosReportadas_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarFotosReportadas_result result = new recuperarFotosReportadas_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarFotosReportadas_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Foto>> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarFotosReportadas(args.idReporte,resultHandler);
      }
    }

    public static class dictaminarIncidente<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dictaminarIncidente_args, Void> {
      public dictaminarIncidente() {
        super("dictaminarIncidente");
      }

      public dictaminarIncidente_args getEmptyArgsInstance() {
        return new dictaminarIncidente_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dictaminarIncidente_result result = new dictaminarIncidente_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dictaminarIncidente_result result = new dictaminarIncidente_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dictaminarIncidente_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.dictaminarIncidente(args.dic,resultHandler);
      }
    }

    public static class validarUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validarUsuario_args, java.lang.Boolean> {
      public validarUsuario() {
        super("validarUsuario");
      }

      public validarUsuario_args getEmptyArgsInstance() {
        return new validarUsuario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            validarUsuario_result result = new validarUsuario_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            validarUsuario_result result = new validarUsuario_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validarUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.validarUsuario(args.usuario,resultHandler);
      }
    }

    public static class validarFolio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validarFolio_args, java.lang.Boolean> {
      public validarFolio() {
        super("validarFolio");
      }

      public validarFolio_args getEmptyArgsInstance() {
        return new validarFolio_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            validarFolio_result result = new validarFolio_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            validarFolio_result result = new validarFolio_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validarFolio_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.validarFolio(args.folio,resultHandler);
      }
    }

    public static class recuperarUsuario<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recuperarUsuario_args, UsuarioClienteEscritorio> {
      public recuperarUsuario() {
        super("recuperarUsuario");
      }

      public recuperarUsuario_args getEmptyArgsInstance() {
        return new recuperarUsuario_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UsuarioClienteEscritorio> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UsuarioClienteEscritorio>() { 
          public void onComplete(UsuarioClienteEscritorio o) {
            recuperarUsuario_result result = new recuperarUsuario_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            recuperarUsuario_result result = new recuperarUsuario_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recuperarUsuario_args args, org.apache.thrift.async.AsyncMethodCallback<UsuarioClienteEscritorio> resultHandler) throws org.apache.thrift.TException {
        iface.recuperarUsuario(args.usuario,resultHandler);
      }
    }

    public static class actualizarContrasena<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, actualizarContrasena_args, Void> {
      public actualizarContrasena() {
        super("actualizarContrasena");
      }

      public actualizarContrasena_args getEmptyArgsInstance() {
        return new actualizarContrasena_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            actualizarContrasena_result result = new actualizarContrasena_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            actualizarContrasena_result result = new actualizarContrasena_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, actualizarContrasena_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.actualizarContrasena(args.idUsuario, args.contrasena,resultHandler);
      }
    }

  }

  public static class validarCredenciales_args implements org.apache.thrift.TBase<validarCredenciales_args, validarCredenciales_args._Fields>, java.io.Serializable, Cloneable, Comparable<validarCredenciales_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validarCredenciales_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRASENA_FIELD_DESC = new org.apache.thrift.protocol.TField("contrasena", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validarCredenciales_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validarCredenciales_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String contrasena; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario"),
      CONTRASENA((short)2, "contrasena");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          case 2: // CONTRASENA
            return CONTRASENA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTRASENA, new org.apache.thrift.meta_data.FieldMetaData("contrasena", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validarCredenciales_args.class, metaDataMap);
    }

    public validarCredenciales_args() {
    }

    public validarCredenciales_args(
      java.lang.String usuario,
      java.lang.String contrasena)
    {
      this();
      this.usuario = usuario;
      this.contrasena = contrasena;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validarCredenciales_args(validarCredenciales_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
      if (other.isSetContrasena()) {
        this.contrasena = other.contrasena;
      }
    }

    public validarCredenciales_args deepCopy() {
      return new validarCredenciales_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
      this.contrasena = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public validarCredenciales_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContrasena() {
      return this.contrasena;
    }

    public validarCredenciales_args setContrasena(@org.apache.thrift.annotation.Nullable java.lang.String contrasena) {
      this.contrasena = contrasena;
      return this;
    }

    public void unsetContrasena() {
      this.contrasena = null;
    }

    /** Returns true if field contrasena is set (has been assigned a value) and false otherwise */
    public boolean isSetContrasena() {
      return this.contrasena != null;
    }

    public void setContrasenaIsSet(boolean value) {
      if (!value) {
        this.contrasena = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      case CONTRASENA:
        if (value == null) {
          unsetContrasena();
        } else {
          setContrasena((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      case CONTRASENA:
        return getContrasena();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      case CONTRASENA:
        return isSetContrasena();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof validarCredenciales_args)
        return this.equals((validarCredenciales_args)that);
      return false;
    }

    public boolean equals(validarCredenciales_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      boolean this_present_contrasena = true && this.isSetContrasena();
      boolean that_present_contrasena = true && that.isSetContrasena();
      if (this_present_contrasena || that_present_contrasena) {
        if (!(this_present_contrasena && that_present_contrasena))
          return false;
        if (!this.contrasena.equals(that.contrasena))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      hashCode = hashCode * 8191 + ((isSetContrasena()) ? 131071 : 524287);
      if (isSetContrasena())
        hashCode = hashCode * 8191 + contrasena.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(validarCredenciales_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContrasena()).compareTo(other.isSetContrasena());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContrasena()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contrasena, other.contrasena);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("validarCredenciales_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contrasena:");
      if (this.contrasena == null) {
        sb.append("null");
      } else {
        sb.append(this.contrasena);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validarCredenciales_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarCredenciales_argsStandardScheme getScheme() {
        return new validarCredenciales_argsStandardScheme();
      }
    }

    private static class validarCredenciales_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<validarCredenciales_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validarCredenciales_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRASENA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contrasena = iprot.readString();
                struct.setContrasenaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validarCredenciales_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        if (struct.contrasena != null) {
          oprot.writeFieldBegin(CONTRASENA_FIELD_DESC);
          oprot.writeString(struct.contrasena);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validarCredenciales_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarCredenciales_argsTupleScheme getScheme() {
        return new validarCredenciales_argsTupleScheme();
      }
    }

    private static class validarCredenciales_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<validarCredenciales_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validarCredenciales_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        if (struct.isSetContrasena()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
        if (struct.isSetContrasena()) {
          oprot.writeString(struct.contrasena);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validarCredenciales_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contrasena = iprot.readString();
          struct.setContrasenaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class validarCredenciales_result implements org.apache.thrift.TBase<validarCredenciales_result, validarCredenciales_result._Fields>, java.io.Serializable, Cloneable, Comparable<validarCredenciales_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validarCredenciales_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validarCredenciales_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validarCredenciales_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validarCredenciales_result.class, metaDataMap);
    }

    public validarCredenciales_result() {
    }

    public validarCredenciales_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validarCredenciales_result(validarCredenciales_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public validarCredenciales_result deepCopy() {
      return new validarCredenciales_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public validarCredenciales_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof validarCredenciales_result)
        return this.equals((validarCredenciales_result)that);
      return false;
    }

    public boolean equals(validarCredenciales_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(validarCredenciales_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("validarCredenciales_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validarCredenciales_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarCredenciales_resultStandardScheme getScheme() {
        return new validarCredenciales_resultStandardScheme();
      }
    }

    private static class validarCredenciales_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<validarCredenciales_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validarCredenciales_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validarCredenciales_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validarCredenciales_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarCredenciales_resultTupleScheme getScheme() {
        return new validarCredenciales_resultTupleScheme();
      }
    }

    private static class validarCredenciales_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<validarCredenciales_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validarCredenciales_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validarCredenciales_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarUsuario_args implements org.apache.thrift.TBase<registrarUsuario_args, registrarUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<registrarUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarUsuario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarUsuario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarUsuario_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable UsuarioClienteEscritorio usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UsuarioClienteEscritorio.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarUsuario_args.class, metaDataMap);
    }

    public registrarUsuario_args() {
    }

    public registrarUsuario_args(
      UsuarioClienteEscritorio usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarUsuario_args(registrarUsuario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = new UsuarioClienteEscritorio(other.usuario);
      }
    }

    public registrarUsuario_args deepCopy() {
      return new registrarUsuario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public UsuarioClienteEscritorio getUsuario() {
      return this.usuario;
    }

    public registrarUsuario_args setUsuario(@org.apache.thrift.annotation.Nullable UsuarioClienteEscritorio usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((UsuarioClienteEscritorio)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarUsuario_args)
        return this.equals((registrarUsuario_args)that);
      return false;
    }

    public boolean equals(registrarUsuario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registrarUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarUsuario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (usuario != null) {
        usuario.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarUsuario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarUsuario_argsStandardScheme getScheme() {
        return new registrarUsuario_argsStandardScheme();
      }
    }

    private static class registrarUsuario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.usuario = new UsuarioClienteEscritorio();
                struct.usuario.read(iprot);
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          struct.usuario.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarUsuario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarUsuario_argsTupleScheme getScheme() {
        return new registrarUsuario_argsTupleScheme();
      }
    }

    private static class registrarUsuario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          struct.usuario.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = new UsuarioClienteEscritorio();
          struct.usuario.read(iprot);
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registrarUsuario_result implements org.apache.thrift.TBase<registrarUsuario_result, registrarUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<registrarUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registrarUsuario_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registrarUsuario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registrarUsuario_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registrarUsuario_result.class, metaDataMap);
    }

    public registrarUsuario_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registrarUsuario_result(registrarUsuario_result other) {
    }

    public registrarUsuario_result deepCopy() {
      return new registrarUsuario_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registrarUsuario_result)
        return this.equals((registrarUsuario_result)that);
      return false;
    }

    public boolean equals(registrarUsuario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(registrarUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registrarUsuario_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registrarUsuario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarUsuario_resultStandardScheme getScheme() {
        return new registrarUsuario_resultStandardScheme();
      }
    }

    private static class registrarUsuario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registrarUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registrarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registrarUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registrarUsuario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registrarUsuario_resultTupleScheme getScheme() {
        return new registrarUsuario_resultTupleScheme();
      }
    }

    private static class registrarUsuario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registrarUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registrarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registrarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarIncidentes_args implements org.apache.thrift.TBase<recuperarIncidentes_args, recuperarIncidentes_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarIncidentes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarIncidentes_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarIncidentes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarIncidentes_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarIncidentes_args.class, metaDataMap);
    }

    public recuperarIncidentes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarIncidentes_args(recuperarIncidentes_args other) {
    }

    public recuperarIncidentes_args deepCopy() {
      return new recuperarIncidentes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarIncidentes_args)
        return this.equals((recuperarIncidentes_args)that);
      return false;
    }

    public boolean equals(recuperarIncidentes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(recuperarIncidentes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarIncidentes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarIncidentes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarIncidentes_argsStandardScheme getScheme() {
        return new recuperarIncidentes_argsStandardScheme();
      }
    }

    private static class recuperarIncidentes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarIncidentes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarIncidentes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarIncidentes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarIncidentes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarIncidentes_argsTupleScheme getScheme() {
        return new recuperarIncidentes_argsTupleScheme();
      }
    }

    private static class recuperarIncidentes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarIncidentes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarIncidentes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarIncidentes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarIncidentes_result implements org.apache.thrift.TBase<recuperarIncidentes_result, recuperarIncidentes_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarIncidentes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarIncidentes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarIncidentes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarIncidentes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Incidente> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Incidente.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarIncidentes_result.class, metaDataMap);
    }

    public recuperarIncidentes_result() {
    }

    public recuperarIncidentes_result(
      java.util.List<Incidente> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarIncidentes_result(recuperarIncidentes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Incidente> __this__success = new java.util.ArrayList<Incidente>(other.success.size());
        for (Incidente other_element : other.success) {
          __this__success.add(new Incidente(other_element));
        }
        this.success = __this__success;
      }
    }

    public recuperarIncidentes_result deepCopy() {
      return new recuperarIncidentes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Incidente> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Incidente elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Incidente>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Incidente> getSuccess() {
      return this.success;
    }

    public recuperarIncidentes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Incidente> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Incidente>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarIncidentes_result)
        return this.equals((recuperarIncidentes_result)that);
      return false;
    }

    public boolean equals(recuperarIncidentes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarIncidentes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarIncidentes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarIncidentes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarIncidentes_resultStandardScheme getScheme() {
        return new recuperarIncidentes_resultStandardScheme();
      }
    }

    private static class recuperarIncidentes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarIncidentes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarIncidentes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Incidente>(_list0.size);
                  @org.apache.thrift.annotation.Nullable Incidente _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Incidente();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarIncidentes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Incidente _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarIncidentes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarIncidentes_resultTupleScheme getScheme() {
        return new recuperarIncidentes_resultTupleScheme();
      }
    }

    private static class recuperarIncidentes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarIncidentes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarIncidentes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Incidente _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarIncidentes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Incidente>(_list5.size);
            @org.apache.thrift.annotation.Nullable Incidente _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Incidente();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarReportes_args implements org.apache.thrift.TBase<recuperarReportes_args, recuperarReportes_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarReportes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarReportes_args");

    private static final org.apache.thrift.protocol.TField ID_INCIDENTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idIncidente", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarReportes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarReportes_argsTupleSchemeFactory();

    public int idIncidente; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_INCIDENTE((short)1, "idIncidente");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_INCIDENTE
            return ID_INCIDENTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDINCIDENTE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_INCIDENTE, new org.apache.thrift.meta_data.FieldMetaData("idIncidente", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarReportes_args.class, metaDataMap);
    }

    public recuperarReportes_args() {
    }

    public recuperarReportes_args(
      int idIncidente)
    {
      this();
      this.idIncidente = idIncidente;
      setIdIncidenteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarReportes_args(recuperarReportes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idIncidente = other.idIncidente;
    }

    public recuperarReportes_args deepCopy() {
      return new recuperarReportes_args(this);
    }

    @Override
    public void clear() {
      setIdIncidenteIsSet(false);
      this.idIncidente = 0;
    }

    public int getIdIncidente() {
      return this.idIncidente;
    }

    public recuperarReportes_args setIdIncidente(int idIncidente) {
      this.idIncidente = idIncidente;
      setIdIncidenteIsSet(true);
      return this;
    }

    public void unsetIdIncidente() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDINCIDENTE_ISSET_ID);
    }

    /** Returns true if field idIncidente is set (has been assigned a value) and false otherwise */
    public boolean isSetIdIncidente() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDINCIDENTE_ISSET_ID);
    }

    public void setIdIncidenteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDINCIDENTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_INCIDENTE:
        if (value == null) {
          unsetIdIncidente();
        } else {
          setIdIncidente((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_INCIDENTE:
        return getIdIncidente();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_INCIDENTE:
        return isSetIdIncidente();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarReportes_args)
        return this.equals((recuperarReportes_args)that);
      return false;
    }

    public boolean equals(recuperarReportes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idIncidente = true;
      boolean that_present_idIncidente = true;
      if (this_present_idIncidente || that_present_idIncidente) {
        if (!(this_present_idIncidente && that_present_idIncidente))
          return false;
        if (this.idIncidente != that.idIncidente)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idIncidente;

      return hashCode;
    }

    @Override
    public int compareTo(recuperarReportes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdIncidente()).compareTo(other.isSetIdIncidente());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdIncidente()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idIncidente, other.idIncidente);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarReportes_args(");
      boolean first = true;

      sb.append("idIncidente:");
      sb.append(this.idIncidente);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarReportes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarReportes_argsStandardScheme getScheme() {
        return new recuperarReportes_argsStandardScheme();
      }
    }

    private static class recuperarReportes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarReportes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarReportes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_INCIDENTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idIncidente = iprot.readI32();
                struct.setIdIncidenteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarReportes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_INCIDENTE_FIELD_DESC);
        oprot.writeI32(struct.idIncidente);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarReportes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarReportes_argsTupleScheme getScheme() {
        return new recuperarReportes_argsTupleScheme();
      }
    }

    private static class recuperarReportes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarReportes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarReportes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdIncidente()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdIncidente()) {
          oprot.writeI32(struct.idIncidente);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarReportes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idIncidente = iprot.readI32();
          struct.setIdIncidenteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarReportes_result implements org.apache.thrift.TBase<recuperarReportes_result, recuperarReportes_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarReportes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarReportes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarReportes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarReportes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Reporte> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reporte.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarReportes_result.class, metaDataMap);
    }

    public recuperarReportes_result() {
    }

    public recuperarReportes_result(
      java.util.List<Reporte> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarReportes_result(recuperarReportes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Reporte> __this__success = new java.util.ArrayList<Reporte>(other.success.size());
        for (Reporte other_element : other.success) {
          __this__success.add(new Reporte(other_element));
        }
        this.success = __this__success;
      }
    }

    public recuperarReportes_result deepCopy() {
      return new recuperarReportes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Reporte> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Reporte elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Reporte>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Reporte> getSuccess() {
      return this.success;
    }

    public recuperarReportes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Reporte> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Reporte>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarReportes_result)
        return this.equals((recuperarReportes_result)that);
      return false;
    }

    public boolean equals(recuperarReportes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarReportes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarReportes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarReportes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarReportes_resultStandardScheme getScheme() {
        return new recuperarReportes_resultStandardScheme();
      }
    }

    private static class recuperarReportes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarReportes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarReportes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Reporte>(_list8.size);
                  @org.apache.thrift.annotation.Nullable Reporte _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Reporte();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarReportes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Reporte _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarReportes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarReportes_resultTupleScheme getScheme() {
        return new recuperarReportes_resultTupleScheme();
      }
    }

    private static class recuperarReportes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarReportes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarReportes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Reporte _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarReportes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Reporte>(_list13.size);
            @org.apache.thrift.annotation.Nullable Reporte _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Reporte();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarVehiculoInvolucrado_args implements org.apache.thrift.TBase<recuperarVehiculoInvolucrado_args, recuperarVehiculoInvolucrado_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarVehiculoInvolucrado_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarVehiculoInvolucrado_args");

    private static final org.apache.thrift.protocol.TField ID_VEHICULO_FIELD_DESC = new org.apache.thrift.protocol.TField("idVehiculo", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarVehiculoInvolucrado_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarVehiculoInvolucrado_argsTupleSchemeFactory();

    public int idVehiculo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_VEHICULO((short)1, "idVehiculo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_VEHICULO
            return ID_VEHICULO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDVEHICULO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_VEHICULO, new org.apache.thrift.meta_data.FieldMetaData("idVehiculo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarVehiculoInvolucrado_args.class, metaDataMap);
    }

    public recuperarVehiculoInvolucrado_args() {
    }

    public recuperarVehiculoInvolucrado_args(
      int idVehiculo)
    {
      this();
      this.idVehiculo = idVehiculo;
      setIdVehiculoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarVehiculoInvolucrado_args(recuperarVehiculoInvolucrado_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idVehiculo = other.idVehiculo;
    }

    public recuperarVehiculoInvolucrado_args deepCopy() {
      return new recuperarVehiculoInvolucrado_args(this);
    }

    @Override
    public void clear() {
      setIdVehiculoIsSet(false);
      this.idVehiculo = 0;
    }

    public int getIdVehiculo() {
      return this.idVehiculo;
    }

    public recuperarVehiculoInvolucrado_args setIdVehiculo(int idVehiculo) {
      this.idVehiculo = idVehiculo;
      setIdVehiculoIsSet(true);
      return this;
    }

    public void unsetIdVehiculo() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDVEHICULO_ISSET_ID);
    }

    /** Returns true if field idVehiculo is set (has been assigned a value) and false otherwise */
    public boolean isSetIdVehiculo() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDVEHICULO_ISSET_ID);
    }

    public void setIdVehiculoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDVEHICULO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_VEHICULO:
        if (value == null) {
          unsetIdVehiculo();
        } else {
          setIdVehiculo((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_VEHICULO:
        return getIdVehiculo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_VEHICULO:
        return isSetIdVehiculo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarVehiculoInvolucrado_args)
        return this.equals((recuperarVehiculoInvolucrado_args)that);
      return false;
    }

    public boolean equals(recuperarVehiculoInvolucrado_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idVehiculo = true;
      boolean that_present_idVehiculo = true;
      if (this_present_idVehiculo || that_present_idVehiculo) {
        if (!(this_present_idVehiculo && that_present_idVehiculo))
          return false;
        if (this.idVehiculo != that.idVehiculo)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idVehiculo;

      return hashCode;
    }

    @Override
    public int compareTo(recuperarVehiculoInvolucrado_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdVehiculo()).compareTo(other.isSetIdVehiculo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdVehiculo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idVehiculo, other.idVehiculo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarVehiculoInvolucrado_args(");
      boolean first = true;

      sb.append("idVehiculo:");
      sb.append(this.idVehiculo);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarVehiculoInvolucrado_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarVehiculoInvolucrado_argsStandardScheme getScheme() {
        return new recuperarVehiculoInvolucrado_argsStandardScheme();
      }
    }

    private static class recuperarVehiculoInvolucrado_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarVehiculoInvolucrado_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarVehiculoInvolucrado_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_VEHICULO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idVehiculo = iprot.readI32();
                struct.setIdVehiculoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarVehiculoInvolucrado_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_VEHICULO_FIELD_DESC);
        oprot.writeI32(struct.idVehiculo);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarVehiculoInvolucrado_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarVehiculoInvolucrado_argsTupleScheme getScheme() {
        return new recuperarVehiculoInvolucrado_argsTupleScheme();
      }
    }

    private static class recuperarVehiculoInvolucrado_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarVehiculoInvolucrado_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarVehiculoInvolucrado_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdVehiculo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdVehiculo()) {
          oprot.writeI32(struct.idVehiculo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarVehiculoInvolucrado_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idVehiculo = iprot.readI32();
          struct.setIdVehiculoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarVehiculoInvolucrado_result implements org.apache.thrift.TBase<recuperarVehiculoInvolucrado_result, recuperarVehiculoInvolucrado_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarVehiculoInvolucrado_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarVehiculoInvolucrado_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarVehiculoInvolucrado_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarVehiculoInvolucrado_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Vehiculo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vehiculo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarVehiculoInvolucrado_result.class, metaDataMap);
    }

    public recuperarVehiculoInvolucrado_result() {
    }

    public recuperarVehiculoInvolucrado_result(
      Vehiculo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarVehiculoInvolucrado_result(recuperarVehiculoInvolucrado_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vehiculo(other.success);
      }
    }

    public recuperarVehiculoInvolucrado_result deepCopy() {
      return new recuperarVehiculoInvolucrado_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Vehiculo getSuccess() {
      return this.success;
    }

    public recuperarVehiculoInvolucrado_result setSuccess(@org.apache.thrift.annotation.Nullable Vehiculo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vehiculo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarVehiculoInvolucrado_result)
        return this.equals((recuperarVehiculoInvolucrado_result)that);
      return false;
    }

    public boolean equals(recuperarVehiculoInvolucrado_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarVehiculoInvolucrado_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarVehiculoInvolucrado_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarVehiculoInvolucrado_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarVehiculoInvolucrado_resultStandardScheme getScheme() {
        return new recuperarVehiculoInvolucrado_resultStandardScheme();
      }
    }

    private static class recuperarVehiculoInvolucrado_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarVehiculoInvolucrado_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarVehiculoInvolucrado_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vehiculo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarVehiculoInvolucrado_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarVehiculoInvolucrado_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarVehiculoInvolucrado_resultTupleScheme getScheme() {
        return new recuperarVehiculoInvolucrado_resultTupleScheme();
      }
    }

    private static class recuperarVehiculoInvolucrado_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarVehiculoInvolucrado_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarVehiculoInvolucrado_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarVehiculoInvolucrado_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Vehiculo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarConductorInvolucrado_args implements org.apache.thrift.TBase<recuperarConductorInvolucrado_args, recuperarConductorInvolucrado_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarConductorInvolucrado_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarConductorInvolucrado_args");

    private static final org.apache.thrift.protocol.TField ID_CONDUCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("idConductor", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarConductorInvolucrado_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarConductorInvolucrado_argsTupleSchemeFactory();

    public int idConductor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_CONDUCTOR((short)1, "idConductor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_CONDUCTOR
            return ID_CONDUCTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDCONDUCTOR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_CONDUCTOR, new org.apache.thrift.meta_data.FieldMetaData("idConductor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarConductorInvolucrado_args.class, metaDataMap);
    }

    public recuperarConductorInvolucrado_args() {
    }

    public recuperarConductorInvolucrado_args(
      int idConductor)
    {
      this();
      this.idConductor = idConductor;
      setIdConductorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarConductorInvolucrado_args(recuperarConductorInvolucrado_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idConductor = other.idConductor;
    }

    public recuperarConductorInvolucrado_args deepCopy() {
      return new recuperarConductorInvolucrado_args(this);
    }

    @Override
    public void clear() {
      setIdConductorIsSet(false);
      this.idConductor = 0;
    }

    public int getIdConductor() {
      return this.idConductor;
    }

    public recuperarConductorInvolucrado_args setIdConductor(int idConductor) {
      this.idConductor = idConductor;
      setIdConductorIsSet(true);
      return this;
    }

    public void unsetIdConductor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDCONDUCTOR_ISSET_ID);
    }

    /** Returns true if field idConductor is set (has been assigned a value) and false otherwise */
    public boolean isSetIdConductor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDCONDUCTOR_ISSET_ID);
    }

    public void setIdConductorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDCONDUCTOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_CONDUCTOR:
        if (value == null) {
          unsetIdConductor();
        } else {
          setIdConductor((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_CONDUCTOR:
        return getIdConductor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_CONDUCTOR:
        return isSetIdConductor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarConductorInvolucrado_args)
        return this.equals((recuperarConductorInvolucrado_args)that);
      return false;
    }

    public boolean equals(recuperarConductorInvolucrado_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idConductor = true;
      boolean that_present_idConductor = true;
      if (this_present_idConductor || that_present_idConductor) {
        if (!(this_present_idConductor && that_present_idConductor))
          return false;
        if (this.idConductor != that.idConductor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idConductor;

      return hashCode;
    }

    @Override
    public int compareTo(recuperarConductorInvolucrado_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdConductor()).compareTo(other.isSetIdConductor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdConductor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idConductor, other.idConductor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarConductorInvolucrado_args(");
      boolean first = true;

      sb.append("idConductor:");
      sb.append(this.idConductor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarConductorInvolucrado_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarConductorInvolucrado_argsStandardScheme getScheme() {
        return new recuperarConductorInvolucrado_argsStandardScheme();
      }
    }

    private static class recuperarConductorInvolucrado_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarConductorInvolucrado_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarConductorInvolucrado_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_CONDUCTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idConductor = iprot.readI32();
                struct.setIdConductorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarConductorInvolucrado_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_CONDUCTOR_FIELD_DESC);
        oprot.writeI32(struct.idConductor);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarConductorInvolucrado_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarConductorInvolucrado_argsTupleScheme getScheme() {
        return new recuperarConductorInvolucrado_argsTupleScheme();
      }
    }

    private static class recuperarConductorInvolucrado_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarConductorInvolucrado_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarConductorInvolucrado_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdConductor()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdConductor()) {
          oprot.writeI32(struct.idConductor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarConductorInvolucrado_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idConductor = iprot.readI32();
          struct.setIdConductorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarConductorInvolucrado_result implements org.apache.thrift.TBase<recuperarConductorInvolucrado_result, recuperarConductorInvolucrado_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarConductorInvolucrado_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarConductorInvolucrado_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarConductorInvolucrado_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarConductorInvolucrado_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Conductor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Conductor.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarConductorInvolucrado_result.class, metaDataMap);
    }

    public recuperarConductorInvolucrado_result() {
    }

    public recuperarConductorInvolucrado_result(
      Conductor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarConductorInvolucrado_result(recuperarConductorInvolucrado_result other) {
      if (other.isSetSuccess()) {
        this.success = new Conductor(other.success);
      }
    }

    public recuperarConductorInvolucrado_result deepCopy() {
      return new recuperarConductorInvolucrado_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Conductor getSuccess() {
      return this.success;
    }

    public recuperarConductorInvolucrado_result setSuccess(@org.apache.thrift.annotation.Nullable Conductor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Conductor)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarConductorInvolucrado_result)
        return this.equals((recuperarConductorInvolucrado_result)that);
      return false;
    }

    public boolean equals(recuperarConductorInvolucrado_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarConductorInvolucrado_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarConductorInvolucrado_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarConductorInvolucrado_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarConductorInvolucrado_resultStandardScheme getScheme() {
        return new recuperarConductorInvolucrado_resultStandardScheme();
      }
    }

    private static class recuperarConductorInvolucrado_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarConductorInvolucrado_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarConductorInvolucrado_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Conductor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarConductorInvolucrado_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarConductorInvolucrado_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarConductorInvolucrado_resultTupleScheme getScheme() {
        return new recuperarConductorInvolucrado_resultTupleScheme();
      }
    }

    private static class recuperarConductorInvolucrado_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarConductorInvolucrado_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarConductorInvolucrado_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarConductorInvolucrado_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Conductor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarFotosReportadas_args implements org.apache.thrift.TBase<recuperarFotosReportadas_args, recuperarFotosReportadas_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarFotosReportadas_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarFotosReportadas_args");

    private static final org.apache.thrift.protocol.TField ID_REPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("idReporte", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarFotosReportadas_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarFotosReportadas_argsTupleSchemeFactory();

    public int idReporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_REPORTE((short)1, "idReporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_REPORTE
            return ID_REPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDREPORTE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_REPORTE, new org.apache.thrift.meta_data.FieldMetaData("idReporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarFotosReportadas_args.class, metaDataMap);
    }

    public recuperarFotosReportadas_args() {
    }

    public recuperarFotosReportadas_args(
      int idReporte)
    {
      this();
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarFotosReportadas_args(recuperarFotosReportadas_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idReporte = other.idReporte;
    }

    public recuperarFotosReportadas_args deepCopy() {
      return new recuperarFotosReportadas_args(this);
    }

    @Override
    public void clear() {
      setIdReporteIsSet(false);
      this.idReporte = 0;
    }

    public int getIdReporte() {
      return this.idReporte;
    }

    public recuperarFotosReportadas_args setIdReporte(int idReporte) {
      this.idReporte = idReporte;
      setIdReporteIsSet(true);
      return this;
    }

    public void unsetIdReporte() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    /** Returns true if field idReporte is set (has been assigned a value) and false otherwise */
    public boolean isSetIdReporte() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDREPORTE_ISSET_ID);
    }

    public void setIdReporteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDREPORTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_REPORTE:
        if (value == null) {
          unsetIdReporte();
        } else {
          setIdReporte((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_REPORTE:
        return getIdReporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_REPORTE:
        return isSetIdReporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarFotosReportadas_args)
        return this.equals((recuperarFotosReportadas_args)that);
      return false;
    }

    public boolean equals(recuperarFotosReportadas_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idReporte = true;
      boolean that_present_idReporte = true;
      if (this_present_idReporte || that_present_idReporte) {
        if (!(this_present_idReporte && that_present_idReporte))
          return false;
        if (this.idReporte != that.idReporte)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idReporte;

      return hashCode;
    }

    @Override
    public int compareTo(recuperarFotosReportadas_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdReporte()).compareTo(other.isSetIdReporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdReporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idReporte, other.idReporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarFotosReportadas_args(");
      boolean first = true;

      sb.append("idReporte:");
      sb.append(this.idReporte);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarFotosReportadas_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarFotosReportadas_argsStandardScheme getScheme() {
        return new recuperarFotosReportadas_argsStandardScheme();
      }
    }

    private static class recuperarFotosReportadas_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarFotosReportadas_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarFotosReportadas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_REPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idReporte = iprot.readI32();
                struct.setIdReporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarFotosReportadas_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_REPORTE_FIELD_DESC);
        oprot.writeI32(struct.idReporte);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarFotosReportadas_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarFotosReportadas_argsTupleScheme getScheme() {
        return new recuperarFotosReportadas_argsTupleScheme();
      }
    }

    private static class recuperarFotosReportadas_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarFotosReportadas_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarFotosReportadas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdReporte()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdReporte()) {
          oprot.writeI32(struct.idReporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarFotosReportadas_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idReporte = iprot.readI32();
          struct.setIdReporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarFotosReportadas_result implements org.apache.thrift.TBase<recuperarFotosReportadas_result, recuperarFotosReportadas_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarFotosReportadas_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarFotosReportadas_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarFotosReportadas_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarFotosReportadas_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Foto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Foto.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarFotosReportadas_result.class, metaDataMap);
    }

    public recuperarFotosReportadas_result() {
    }

    public recuperarFotosReportadas_result(
      java.util.List<Foto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarFotosReportadas_result(recuperarFotosReportadas_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Foto> __this__success = new java.util.ArrayList<Foto>(other.success.size());
        for (Foto other_element : other.success) {
          __this__success.add(new Foto(other_element));
        }
        this.success = __this__success;
      }
    }

    public recuperarFotosReportadas_result deepCopy() {
      return new recuperarFotosReportadas_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Foto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Foto elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Foto>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Foto> getSuccess() {
      return this.success;
    }

    public recuperarFotosReportadas_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Foto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Foto>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarFotosReportadas_result)
        return this.equals((recuperarFotosReportadas_result)that);
      return false;
    }

    public boolean equals(recuperarFotosReportadas_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarFotosReportadas_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarFotosReportadas_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarFotosReportadas_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarFotosReportadas_resultStandardScheme getScheme() {
        return new recuperarFotosReportadas_resultStandardScheme();
      }
    }

    private static class recuperarFotosReportadas_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarFotosReportadas_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarFotosReportadas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Foto>(_list16.size);
                  @org.apache.thrift.annotation.Nullable Foto _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Foto();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarFotosReportadas_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Foto _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarFotosReportadas_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarFotosReportadas_resultTupleScheme getScheme() {
        return new recuperarFotosReportadas_resultTupleScheme();
      }
    }

    private static class recuperarFotosReportadas_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarFotosReportadas_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarFotosReportadas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Foto _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarFotosReportadas_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Foto>(_list21.size);
            @org.apache.thrift.annotation.Nullable Foto _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Foto();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dictaminarIncidente_args implements org.apache.thrift.TBase<dictaminarIncidente_args, dictaminarIncidente_args._Fields>, java.io.Serializable, Cloneable, Comparable<dictaminarIncidente_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dictaminarIncidente_args");

    private static final org.apache.thrift.protocol.TField DIC_FIELD_DESC = new org.apache.thrift.protocol.TField("dic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dictaminarIncidente_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dictaminarIncidente_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Dictamen dic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIC((short)1, "dic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIC
            return DIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIC, new org.apache.thrift.meta_data.FieldMetaData("dic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dictamen.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dictaminarIncidente_args.class, metaDataMap);
    }

    public dictaminarIncidente_args() {
    }

    public dictaminarIncidente_args(
      Dictamen dic)
    {
      this();
      this.dic = dic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dictaminarIncidente_args(dictaminarIncidente_args other) {
      if (other.isSetDic()) {
        this.dic = new Dictamen(other.dic);
      }
    }

    public dictaminarIncidente_args deepCopy() {
      return new dictaminarIncidente_args(this);
    }

    @Override
    public void clear() {
      this.dic = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Dictamen getDic() {
      return this.dic;
    }

    public dictaminarIncidente_args setDic(@org.apache.thrift.annotation.Nullable Dictamen dic) {
      this.dic = dic;
      return this;
    }

    public void unsetDic() {
      this.dic = null;
    }

    /** Returns true if field dic is set (has been assigned a value) and false otherwise */
    public boolean isSetDic() {
      return this.dic != null;
    }

    public void setDicIsSet(boolean value) {
      if (!value) {
        this.dic = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DIC:
        if (value == null) {
          unsetDic();
        } else {
          setDic((Dictamen)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DIC:
        return getDic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DIC:
        return isSetDic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dictaminarIncidente_args)
        return this.equals((dictaminarIncidente_args)that);
      return false;
    }

    public boolean equals(dictaminarIncidente_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dic = true && this.isSetDic();
      boolean that_present_dic = true && that.isSetDic();
      if (this_present_dic || that_present_dic) {
        if (!(this_present_dic && that_present_dic))
          return false;
        if (!this.dic.equals(that.dic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDic()) ? 131071 : 524287);
      if (isSetDic())
        hashCode = hashCode * 8191 + dic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dictaminarIncidente_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDic()).compareTo(other.isSetDic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dic, other.dic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dictaminarIncidente_args(");
      boolean first = true;

      sb.append("dic:");
      if (this.dic == null) {
        sb.append("null");
      } else {
        sb.append(this.dic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dic != null) {
        dic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dictaminarIncidente_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dictaminarIncidente_argsStandardScheme getScheme() {
        return new dictaminarIncidente_argsStandardScheme();
      }
    }

    private static class dictaminarIncidente_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dictaminarIncidente_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dictaminarIncidente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dic = new Dictamen();
                struct.dic.read(iprot);
                struct.setDicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dictaminarIncidente_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dic != null) {
          oprot.writeFieldBegin(DIC_FIELD_DESC);
          struct.dic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dictaminarIncidente_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dictaminarIncidente_argsTupleScheme getScheme() {
        return new dictaminarIncidente_argsTupleScheme();
      }
    }

    private static class dictaminarIncidente_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dictaminarIncidente_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dictaminarIncidente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDic()) {
          struct.dic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dictaminarIncidente_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dic = new Dictamen();
          struct.dic.read(iprot);
          struct.setDicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dictaminarIncidente_result implements org.apache.thrift.TBase<dictaminarIncidente_result, dictaminarIncidente_result._Fields>, java.io.Serializable, Cloneable, Comparable<dictaminarIncidente_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dictaminarIncidente_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dictaminarIncidente_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dictaminarIncidente_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dictaminarIncidente_result.class, metaDataMap);
    }

    public dictaminarIncidente_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dictaminarIncidente_result(dictaminarIncidente_result other) {
    }

    public dictaminarIncidente_result deepCopy() {
      return new dictaminarIncidente_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dictaminarIncidente_result)
        return this.equals((dictaminarIncidente_result)that);
      return false;
    }

    public boolean equals(dictaminarIncidente_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(dictaminarIncidente_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dictaminarIncidente_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dictaminarIncidente_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dictaminarIncidente_resultStandardScheme getScheme() {
        return new dictaminarIncidente_resultStandardScheme();
      }
    }

    private static class dictaminarIncidente_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dictaminarIncidente_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dictaminarIncidente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dictaminarIncidente_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dictaminarIncidente_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dictaminarIncidente_resultTupleScheme getScheme() {
        return new dictaminarIncidente_resultTupleScheme();
      }
    }

    private static class dictaminarIncidente_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dictaminarIncidente_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dictaminarIncidente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dictaminarIncidente_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class validarUsuario_args implements org.apache.thrift.TBase<validarUsuario_args, validarUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<validarUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validarUsuario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validarUsuario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validarUsuario_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validarUsuario_args.class, metaDataMap);
    }

    public validarUsuario_args() {
    }

    public validarUsuario_args(
      java.lang.String usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validarUsuario_args(validarUsuario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
    }

    public validarUsuario_args deepCopy() {
      return new validarUsuario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public validarUsuario_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof validarUsuario_args)
        return this.equals((validarUsuario_args)that);
      return false;
    }

    public boolean equals(validarUsuario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(validarUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("validarUsuario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validarUsuario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarUsuario_argsStandardScheme getScheme() {
        return new validarUsuario_argsStandardScheme();
      }
    }

    private static class validarUsuario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<validarUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validarUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validarUsuario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarUsuario_argsTupleScheme getScheme() {
        return new validarUsuario_argsTupleScheme();
      }
    }

    private static class validarUsuario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<validarUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class validarUsuario_result implements org.apache.thrift.TBase<validarUsuario_result, validarUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<validarUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validarUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validarUsuario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validarUsuario_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validarUsuario_result.class, metaDataMap);
    }

    public validarUsuario_result() {
    }

    public validarUsuario_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validarUsuario_result(validarUsuario_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public validarUsuario_result deepCopy() {
      return new validarUsuario_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public validarUsuario_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof validarUsuario_result)
        return this.equals((validarUsuario_result)that);
      return false;
    }

    public boolean equals(validarUsuario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(validarUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("validarUsuario_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validarUsuario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarUsuario_resultStandardScheme getScheme() {
        return new validarUsuario_resultStandardScheme();
      }
    }

    private static class validarUsuario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<validarUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validarUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validarUsuario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarUsuario_resultTupleScheme getScheme() {
        return new validarUsuario_resultTupleScheme();
      }
    }

    private static class validarUsuario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<validarUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class validarFolio_args implements org.apache.thrift.TBase<validarFolio_args, validarFolio_args._Fields>, java.io.Serializable, Cloneable, Comparable<validarFolio_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validarFolio_args");

    private static final org.apache.thrift.protocol.TField FOLIO_FIELD_DESC = new org.apache.thrift.protocol.TField("folio", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validarFolio_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validarFolio_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String folio; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOLIO((short)1, "folio");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOLIO
            return FOLIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOLIO, new org.apache.thrift.meta_data.FieldMetaData("folio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validarFolio_args.class, metaDataMap);
    }

    public validarFolio_args() {
    }

    public validarFolio_args(
      java.lang.String folio)
    {
      this();
      this.folio = folio;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validarFolio_args(validarFolio_args other) {
      if (other.isSetFolio()) {
        this.folio = other.folio;
      }
    }

    public validarFolio_args deepCopy() {
      return new validarFolio_args(this);
    }

    @Override
    public void clear() {
      this.folio = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFolio() {
      return this.folio;
    }

    public validarFolio_args setFolio(@org.apache.thrift.annotation.Nullable java.lang.String folio) {
      this.folio = folio;
      return this;
    }

    public void unsetFolio() {
      this.folio = null;
    }

    /** Returns true if field folio is set (has been assigned a value) and false otherwise */
    public boolean isSetFolio() {
      return this.folio != null;
    }

    public void setFolioIsSet(boolean value) {
      if (!value) {
        this.folio = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FOLIO:
        if (value == null) {
          unsetFolio();
        } else {
          setFolio((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FOLIO:
        return getFolio();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FOLIO:
        return isSetFolio();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof validarFolio_args)
        return this.equals((validarFolio_args)that);
      return false;
    }

    public boolean equals(validarFolio_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_folio = true && this.isSetFolio();
      boolean that_present_folio = true && that.isSetFolio();
      if (this_present_folio || that_present_folio) {
        if (!(this_present_folio && that_present_folio))
          return false;
        if (!this.folio.equals(that.folio))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFolio()) ? 131071 : 524287);
      if (isSetFolio())
        hashCode = hashCode * 8191 + folio.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(validarFolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFolio()).compareTo(other.isSetFolio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFolio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.folio, other.folio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("validarFolio_args(");
      boolean first = true;

      sb.append("folio:");
      if (this.folio == null) {
        sb.append("null");
      } else {
        sb.append(this.folio);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validarFolio_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarFolio_argsStandardScheme getScheme() {
        return new validarFolio_argsStandardScheme();
      }
    }

    private static class validarFolio_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<validarFolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validarFolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOLIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.folio = iprot.readString();
                struct.setFolioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validarFolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.folio != null) {
          oprot.writeFieldBegin(FOLIO_FIELD_DESC);
          oprot.writeString(struct.folio);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validarFolio_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarFolio_argsTupleScheme getScheme() {
        return new validarFolio_argsTupleScheme();
      }
    }

    private static class validarFolio_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<validarFolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validarFolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFolio()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFolio()) {
          oprot.writeString(struct.folio);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validarFolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.folio = iprot.readString();
          struct.setFolioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class validarFolio_result implements org.apache.thrift.TBase<validarFolio_result, validarFolio_result._Fields>, java.io.Serializable, Cloneable, Comparable<validarFolio_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validarFolio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new validarFolio_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new validarFolio_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validarFolio_result.class, metaDataMap);
    }

    public validarFolio_result() {
    }

    public validarFolio_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validarFolio_result(validarFolio_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public validarFolio_result deepCopy() {
      return new validarFolio_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public validarFolio_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof validarFolio_result)
        return this.equals((validarFolio_result)that);
      return false;
    }

    public boolean equals(validarFolio_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(validarFolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("validarFolio_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validarFolio_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarFolio_resultStandardScheme getScheme() {
        return new validarFolio_resultStandardScheme();
      }
    }

    private static class validarFolio_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<validarFolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validarFolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validarFolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validarFolio_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public validarFolio_resultTupleScheme getScheme() {
        return new validarFolio_resultTupleScheme();
      }
    }

    private static class validarFolio_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<validarFolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validarFolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validarFolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarUsuario_args implements org.apache.thrift.TBase<recuperarUsuario_args, recuperarUsuario_args._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarUsuario_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarUsuario_args");

    private static final org.apache.thrift.protocol.TField USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("usuario", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarUsuario_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarUsuario_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String usuario; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USUARIO((short)1, "usuario");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USUARIO
            return USUARIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USUARIO, new org.apache.thrift.meta_data.FieldMetaData("usuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarUsuario_args.class, metaDataMap);
    }

    public recuperarUsuario_args() {
    }

    public recuperarUsuario_args(
      java.lang.String usuario)
    {
      this();
      this.usuario = usuario;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarUsuario_args(recuperarUsuario_args other) {
      if (other.isSetUsuario()) {
        this.usuario = other.usuario;
      }
    }

    public recuperarUsuario_args deepCopy() {
      return new recuperarUsuario_args(this);
    }

    @Override
    public void clear() {
      this.usuario = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsuario() {
      return this.usuario;
    }

    public recuperarUsuario_args setUsuario(@org.apache.thrift.annotation.Nullable java.lang.String usuario) {
      this.usuario = usuario;
      return this;
    }

    public void unsetUsuario() {
      this.usuario = null;
    }

    /** Returns true if field usuario is set (has been assigned a value) and false otherwise */
    public boolean isSetUsuario() {
      return this.usuario != null;
    }

    public void setUsuarioIsSet(boolean value) {
      if (!value) {
        this.usuario = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USUARIO:
        if (value == null) {
          unsetUsuario();
        } else {
          setUsuario((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USUARIO:
        return getUsuario();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USUARIO:
        return isSetUsuario();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarUsuario_args)
        return this.equals((recuperarUsuario_args)that);
      return false;
    }

    public boolean equals(recuperarUsuario_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_usuario = true && this.isSetUsuario();
      boolean that_present_usuario = true && that.isSetUsuario();
      if (this_present_usuario || that_present_usuario) {
        if (!(this_present_usuario && that_present_usuario))
          return false;
        if (!this.usuario.equals(that.usuario))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsuario()) ? 131071 : 524287);
      if (isSetUsuario())
        hashCode = hashCode * 8191 + usuario.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarUsuario_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsuario()).compareTo(other.isSetUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usuario, other.usuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarUsuario_args(");
      boolean first = true;

      sb.append("usuario:");
      if (this.usuario == null) {
        sb.append("null");
      } else {
        sb.append(this.usuario);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarUsuario_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarUsuario_argsStandardScheme getScheme() {
        return new recuperarUsuario_argsStandardScheme();
      }
    }

    private static class recuperarUsuario_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarUsuario_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usuario = iprot.readString();
                struct.setUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarUsuario_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usuario != null) {
          oprot.writeFieldBegin(USUARIO_FIELD_DESC);
          oprot.writeString(struct.usuario);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarUsuario_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarUsuario_argsTupleScheme getScheme() {
        return new recuperarUsuario_argsTupleScheme();
      }
    }

    private static class recuperarUsuario_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarUsuario_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsuario()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsuario()) {
          oprot.writeString(struct.usuario);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarUsuario_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.usuario = iprot.readString();
          struct.setUsuarioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class recuperarUsuario_result implements org.apache.thrift.TBase<recuperarUsuario_result, recuperarUsuario_result._Fields>, java.io.Serializable, Cloneable, Comparable<recuperarUsuario_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recuperarUsuario_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new recuperarUsuario_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new recuperarUsuario_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable UsuarioClienteEscritorio success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UsuarioClienteEscritorio.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recuperarUsuario_result.class, metaDataMap);
    }

    public recuperarUsuario_result() {
    }

    public recuperarUsuario_result(
      UsuarioClienteEscritorio success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recuperarUsuario_result(recuperarUsuario_result other) {
      if (other.isSetSuccess()) {
        this.success = new UsuarioClienteEscritorio(other.success);
      }
    }

    public recuperarUsuario_result deepCopy() {
      return new recuperarUsuario_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public UsuarioClienteEscritorio getSuccess() {
      return this.success;
    }

    public recuperarUsuario_result setSuccess(@org.apache.thrift.annotation.Nullable UsuarioClienteEscritorio success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UsuarioClienteEscritorio)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof recuperarUsuario_result)
        return this.equals((recuperarUsuario_result)that);
      return false;
    }

    public boolean equals(recuperarUsuario_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(recuperarUsuario_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("recuperarUsuario_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recuperarUsuario_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarUsuario_resultStandardScheme getScheme() {
        return new recuperarUsuario_resultStandardScheme();
      }
    }

    private static class recuperarUsuario_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<recuperarUsuario_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recuperarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UsuarioClienteEscritorio();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recuperarUsuario_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recuperarUsuario_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public recuperarUsuario_resultTupleScheme getScheme() {
        return new recuperarUsuario_resultTupleScheme();
      }
    }

    private static class recuperarUsuario_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<recuperarUsuario_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recuperarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recuperarUsuario_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UsuarioClienteEscritorio();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class actualizarContrasena_args implements org.apache.thrift.TBase<actualizarContrasena_args, actualizarContrasena_args._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarContrasena_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarContrasena_args");

    private static final org.apache.thrift.protocol.TField ID_USUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("idUsuario", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRASENA_FIELD_DESC = new org.apache.thrift.protocol.TField("contrasena", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new actualizarContrasena_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new actualizarContrasena_argsTupleSchemeFactory();

    public int idUsuario; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String contrasena; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_USUARIO((short)1, "idUsuario"),
      CONTRASENA((short)2, "contrasena");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_USUARIO
            return ID_USUARIO;
          case 2: // CONTRASENA
            return CONTRASENA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDUSUARIO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_USUARIO, new org.apache.thrift.meta_data.FieldMetaData("idUsuario", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTRASENA, new org.apache.thrift.meta_data.FieldMetaData("contrasena", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarContrasena_args.class, metaDataMap);
    }

    public actualizarContrasena_args() {
    }

    public actualizarContrasena_args(
      int idUsuario,
      java.lang.String contrasena)
    {
      this();
      this.idUsuario = idUsuario;
      setIdUsuarioIsSet(true);
      this.contrasena = contrasena;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarContrasena_args(actualizarContrasena_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idUsuario = other.idUsuario;
      if (other.isSetContrasena()) {
        this.contrasena = other.contrasena;
      }
    }

    public actualizarContrasena_args deepCopy() {
      return new actualizarContrasena_args(this);
    }

    @Override
    public void clear() {
      setIdUsuarioIsSet(false);
      this.idUsuario = 0;
      this.contrasena = null;
    }

    public int getIdUsuario() {
      return this.idUsuario;
    }

    public actualizarContrasena_args setIdUsuario(int idUsuario) {
      this.idUsuario = idUsuario;
      setIdUsuarioIsSet(true);
      return this;
    }

    public void unsetIdUsuario() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDUSUARIO_ISSET_ID);
    }

    /** Returns true if field idUsuario is set (has been assigned a value) and false otherwise */
    public boolean isSetIdUsuario() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDUSUARIO_ISSET_ID);
    }

    public void setIdUsuarioIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDUSUARIO_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContrasena() {
      return this.contrasena;
    }

    public actualizarContrasena_args setContrasena(@org.apache.thrift.annotation.Nullable java.lang.String contrasena) {
      this.contrasena = contrasena;
      return this;
    }

    public void unsetContrasena() {
      this.contrasena = null;
    }

    /** Returns true if field contrasena is set (has been assigned a value) and false otherwise */
    public boolean isSetContrasena() {
      return this.contrasena != null;
    }

    public void setContrasenaIsSet(boolean value) {
      if (!value) {
        this.contrasena = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ID_USUARIO:
        if (value == null) {
          unsetIdUsuario();
        } else {
          setIdUsuario((java.lang.Integer)value);
        }
        break;

      case CONTRASENA:
        if (value == null) {
          unsetContrasena();
        } else {
          setContrasena((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_USUARIO:
        return getIdUsuario();

      case CONTRASENA:
        return getContrasena();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID_USUARIO:
        return isSetIdUsuario();
      case CONTRASENA:
        return isSetContrasena();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarContrasena_args)
        return this.equals((actualizarContrasena_args)that);
      return false;
    }

    public boolean equals(actualizarContrasena_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idUsuario = true;
      boolean that_present_idUsuario = true;
      if (this_present_idUsuario || that_present_idUsuario) {
        if (!(this_present_idUsuario && that_present_idUsuario))
          return false;
        if (this.idUsuario != that.idUsuario)
          return false;
      }

      boolean this_present_contrasena = true && this.isSetContrasena();
      boolean that_present_contrasena = true && that.isSetContrasena();
      if (this_present_contrasena || that_present_contrasena) {
        if (!(this_present_contrasena && that_present_contrasena))
          return false;
        if (!this.contrasena.equals(that.contrasena))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idUsuario;

      hashCode = hashCode * 8191 + ((isSetContrasena()) ? 131071 : 524287);
      if (isSetContrasena())
        hashCode = hashCode * 8191 + contrasena.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(actualizarContrasena_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdUsuario()).compareTo(other.isSetIdUsuario());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdUsuario()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idUsuario, other.idUsuario);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContrasena()).compareTo(other.isSetContrasena());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContrasena()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contrasena, other.contrasena);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("actualizarContrasena_args(");
      boolean first = true;

      sb.append("idUsuario:");
      sb.append(this.idUsuario);
      first = false;
      if (!first) sb.append(", ");
      sb.append("contrasena:");
      if (this.contrasena == null) {
        sb.append("null");
      } else {
        sb.append(this.contrasena);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarContrasena_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarContrasena_argsStandardScheme getScheme() {
        return new actualizarContrasena_argsStandardScheme();
      }
    }

    private static class actualizarContrasena_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<actualizarContrasena_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarContrasena_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_USUARIO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idUsuario = iprot.readI32();
                struct.setIdUsuarioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRASENA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contrasena = iprot.readString();
                struct.setContrasenaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarContrasena_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_USUARIO_FIELD_DESC);
        oprot.writeI32(struct.idUsuario);
        oprot.writeFieldEnd();
        if (struct.contrasena != null) {
          oprot.writeFieldBegin(CONTRASENA_FIELD_DESC);
          oprot.writeString(struct.contrasena);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarContrasena_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarContrasena_argsTupleScheme getScheme() {
        return new actualizarContrasena_argsTupleScheme();
      }
    }

    private static class actualizarContrasena_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<actualizarContrasena_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarContrasena_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdUsuario()) {
          optionals.set(0);
        }
        if (struct.isSetContrasena()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIdUsuario()) {
          oprot.writeI32(struct.idUsuario);
        }
        if (struct.isSetContrasena()) {
          oprot.writeString(struct.contrasena);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarContrasena_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.idUsuario = iprot.readI32();
          struct.setIdUsuarioIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contrasena = iprot.readString();
          struct.setContrasenaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class actualizarContrasena_result implements org.apache.thrift.TBase<actualizarContrasena_result, actualizarContrasena_result._Fields>, java.io.Serializable, Cloneable, Comparable<actualizarContrasena_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("actualizarContrasena_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new actualizarContrasena_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new actualizarContrasena_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(actualizarContrasena_result.class, metaDataMap);
    }

    public actualizarContrasena_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public actualizarContrasena_result(actualizarContrasena_result other) {
    }

    public actualizarContrasena_result deepCopy() {
      return new actualizarContrasena_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof actualizarContrasena_result)
        return this.equals((actualizarContrasena_result)that);
      return false;
    }

    public boolean equals(actualizarContrasena_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(actualizarContrasena_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("actualizarContrasena_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class actualizarContrasena_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarContrasena_resultStandardScheme getScheme() {
        return new actualizarContrasena_resultStandardScheme();
      }
    }

    private static class actualizarContrasena_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<actualizarContrasena_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, actualizarContrasena_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, actualizarContrasena_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class actualizarContrasena_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public actualizarContrasena_resultTupleScheme getScheme() {
        return new actualizarContrasena_resultTupleScheme();
      }
    }

    private static class actualizarContrasena_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<actualizarContrasena_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, actualizarContrasena_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, actualizarContrasena_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

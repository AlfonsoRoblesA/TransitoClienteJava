/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-16")
public class Vehiculo implements org.apache.thrift.TBase<Vehiculo, Vehiculo._Fields>, java.io.Serializable, Cloneable, Comparable<Vehiculo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Vehiculo");

  private static final org.apache.thrift.protocol.TField ID_VEHICULO_FIELD_DESC = new org.apache.thrift.protocol.TField("idVehiculo", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MARCA_FIELD_DESC = new org.apache.thrift.protocol.TField("marca", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODELO_FIELD_DESC = new org.apache.thrift.protocol.TField("modelo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ANIO_FIELD_DESC = new org.apache.thrift.protocol.TField("anio", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOMBRE_ASEGURADORA_FIELD_DESC = new org.apache.thrift.protocol.TField("nombreAseguradora", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_POLIZA_FIELD_DESC = new org.apache.thrift.protocol.TField("numPoliza", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PLACA_FIELD_DESC = new org.apache.thrift.protocol.TField("placa", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VehiculoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VehiculoTupleSchemeFactory();

  public int idVehiculo; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String marca; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String modelo; // required
  public int anio; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String color; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String nombreAseguradora; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String numPoliza; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String placa; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_VEHICULO((short)1, "idVehiculo"),
    MARCA((short)2, "marca"),
    MODELO((short)3, "modelo"),
    ANIO((short)4, "anio"),
    COLOR((short)5, "color"),
    NOMBRE_ASEGURADORA((short)6, "nombreAseguradora"),
    NUM_POLIZA((short)7, "numPoliza"),
    PLACA((short)8, "placa");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_VEHICULO
          return ID_VEHICULO;
        case 2: // MARCA
          return MARCA;
        case 3: // MODELO
          return MODELO;
        case 4: // ANIO
          return ANIO;
        case 5: // COLOR
          return COLOR;
        case 6: // NOMBRE_ASEGURADORA
          return NOMBRE_ASEGURADORA;
        case 7: // NUM_POLIZA
          return NUM_POLIZA;
        case 8: // PLACA
          return PLACA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDVEHICULO_ISSET_ID = 0;
  private static final int __ANIO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_VEHICULO, new org.apache.thrift.meta_data.FieldMetaData("idVehiculo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARCA, new org.apache.thrift.meta_data.FieldMetaData("marca", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODELO, new org.apache.thrift.meta_data.FieldMetaData("modelo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANIO, new org.apache.thrift.meta_data.FieldMetaData("anio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOMBRE_ASEGURADORA, new org.apache.thrift.meta_data.FieldMetaData("nombreAseguradora", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_POLIZA, new org.apache.thrift.meta_data.FieldMetaData("numPoliza", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLACA, new org.apache.thrift.meta_data.FieldMetaData("placa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Vehiculo.class, metaDataMap);
  }

  public Vehiculo() {
  }

  public Vehiculo(
    int idVehiculo,
    java.lang.String marca,
    java.lang.String modelo,
    int anio,
    java.lang.String color,
    java.lang.String nombreAseguradora,
    java.lang.String numPoliza,
    java.lang.String placa)
  {
    this();
    this.idVehiculo = idVehiculo;
    setIdVehiculoIsSet(true);
    this.marca = marca;
    this.modelo = modelo;
    this.anio = anio;
    setAnioIsSet(true);
    this.color = color;
    this.nombreAseguradora = nombreAseguradora;
    this.numPoliza = numPoliza;
    this.placa = placa;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Vehiculo(Vehiculo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idVehiculo = other.idVehiculo;
    if (other.isSetMarca()) {
      this.marca = other.marca;
    }
    if (other.isSetModelo()) {
      this.modelo = other.modelo;
    }
    this.anio = other.anio;
    if (other.isSetColor()) {
      this.color = other.color;
    }
    if (other.isSetNombreAseguradora()) {
      this.nombreAseguradora = other.nombreAseguradora;
    }
    if (other.isSetNumPoliza()) {
      this.numPoliza = other.numPoliza;
    }
    if (other.isSetPlaca()) {
      this.placa = other.placa;
    }
  }

  public Vehiculo deepCopy() {
    return new Vehiculo(this);
  }

  @Override
  public void clear() {
    setIdVehiculoIsSet(false);
    this.idVehiculo = 0;
    this.marca = null;
    this.modelo = null;
    setAnioIsSet(false);
    this.anio = 0;
    this.color = null;
    this.nombreAseguradora = null;
    this.numPoliza = null;
    this.placa = null;
  }

  public int getIdVehiculo() {
    return this.idVehiculo;
  }

  public Vehiculo setIdVehiculo(int idVehiculo) {
    this.idVehiculo = idVehiculo;
    setIdVehiculoIsSet(true);
    return this;
  }

  public void unsetIdVehiculo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDVEHICULO_ISSET_ID);
  }

  /** Returns true if field idVehiculo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdVehiculo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDVEHICULO_ISSET_ID);
  }

  public void setIdVehiculoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDVEHICULO_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMarca() {
    return this.marca;
  }

  public Vehiculo setMarca(@org.apache.thrift.annotation.Nullable java.lang.String marca) {
    this.marca = marca;
    return this;
  }

  public void unsetMarca() {
    this.marca = null;
  }

  /** Returns true if field marca is set (has been assigned a value) and false otherwise */
  public boolean isSetMarca() {
    return this.marca != null;
  }

  public void setMarcaIsSet(boolean value) {
    if (!value) {
      this.marca = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModelo() {
    return this.modelo;
  }

  public Vehiculo setModelo(@org.apache.thrift.annotation.Nullable java.lang.String modelo) {
    this.modelo = modelo;
    return this;
  }

  public void unsetModelo() {
    this.modelo = null;
  }

  /** Returns true if field modelo is set (has been assigned a value) and false otherwise */
  public boolean isSetModelo() {
    return this.modelo != null;
  }

  public void setModeloIsSet(boolean value) {
    if (!value) {
      this.modelo = null;
    }
  }

  public int getAnio() {
    return this.anio;
  }

  public Vehiculo setAnio(int anio) {
    this.anio = anio;
    setAnioIsSet(true);
    return this;
  }

  public void unsetAnio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANIO_ISSET_ID);
  }

  /** Returns true if field anio is set (has been assigned a value) and false otherwise */
  public boolean isSetAnio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANIO_ISSET_ID);
  }

  public void setAnioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANIO_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColor() {
    return this.color;
  }

  public Vehiculo setColor(@org.apache.thrift.annotation.Nullable java.lang.String color) {
    this.color = color;
    return this;
  }

  public void unsetColor() {
    this.color = null;
  }

  /** Returns true if field color is set (has been assigned a value) and false otherwise */
  public boolean isSetColor() {
    return this.color != null;
  }

  public void setColorIsSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNombreAseguradora() {
    return this.nombreAseguradora;
  }

  public Vehiculo setNombreAseguradora(@org.apache.thrift.annotation.Nullable java.lang.String nombreAseguradora) {
    this.nombreAseguradora = nombreAseguradora;
    return this;
  }

  public void unsetNombreAseguradora() {
    this.nombreAseguradora = null;
  }

  /** Returns true if field nombreAseguradora is set (has been assigned a value) and false otherwise */
  public boolean isSetNombreAseguradora() {
    return this.nombreAseguradora != null;
  }

  public void setNombreAseguradoraIsSet(boolean value) {
    if (!value) {
      this.nombreAseguradora = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNumPoliza() {
    return this.numPoliza;
  }

  public Vehiculo setNumPoliza(@org.apache.thrift.annotation.Nullable java.lang.String numPoliza) {
    this.numPoliza = numPoliza;
    return this;
  }

  public void unsetNumPoliza() {
    this.numPoliza = null;
  }

  /** Returns true if field numPoliza is set (has been assigned a value) and false otherwise */
  public boolean isSetNumPoliza() {
    return this.numPoliza != null;
  }

  public void setNumPolizaIsSet(boolean value) {
    if (!value) {
      this.numPoliza = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPlaca() {
    return this.placa;
  }

  public Vehiculo setPlaca(@org.apache.thrift.annotation.Nullable java.lang.String placa) {
    this.placa = placa;
    return this;
  }

  public void unsetPlaca() {
    this.placa = null;
  }

  /** Returns true if field placa is set (has been assigned a value) and false otherwise */
  public boolean isSetPlaca() {
    return this.placa != null;
  }

  public void setPlacaIsSet(boolean value) {
    if (!value) {
      this.placa = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID_VEHICULO:
      if (value == null) {
        unsetIdVehiculo();
      } else {
        setIdVehiculo((java.lang.Integer)value);
      }
      break;

    case MARCA:
      if (value == null) {
        unsetMarca();
      } else {
        setMarca((java.lang.String)value);
      }
      break;

    case MODELO:
      if (value == null) {
        unsetModelo();
      } else {
        setModelo((java.lang.String)value);
      }
      break;

    case ANIO:
      if (value == null) {
        unsetAnio();
      } else {
        setAnio((java.lang.Integer)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unsetColor();
      } else {
        setColor((java.lang.String)value);
      }
      break;

    case NOMBRE_ASEGURADORA:
      if (value == null) {
        unsetNombreAseguradora();
      } else {
        setNombreAseguradora((java.lang.String)value);
      }
      break;

    case NUM_POLIZA:
      if (value == null) {
        unsetNumPoliza();
      } else {
        setNumPoliza((java.lang.String)value);
      }
      break;

    case PLACA:
      if (value == null) {
        unsetPlaca();
      } else {
        setPlaca((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_VEHICULO:
      return getIdVehiculo();

    case MARCA:
      return getMarca();

    case MODELO:
      return getModelo();

    case ANIO:
      return getAnio();

    case COLOR:
      return getColor();

    case NOMBRE_ASEGURADORA:
      return getNombreAseguradora();

    case NUM_POLIZA:
      return getNumPoliza();

    case PLACA:
      return getPlaca();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_VEHICULO:
      return isSetIdVehiculo();
    case MARCA:
      return isSetMarca();
    case MODELO:
      return isSetModelo();
    case ANIO:
      return isSetAnio();
    case COLOR:
      return isSetColor();
    case NOMBRE_ASEGURADORA:
      return isSetNombreAseguradora();
    case NUM_POLIZA:
      return isSetNumPoliza();
    case PLACA:
      return isSetPlaca();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Vehiculo)
      return this.equals((Vehiculo)that);
    return false;
  }

  public boolean equals(Vehiculo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_idVehiculo = true;
    boolean that_present_idVehiculo = true;
    if (this_present_idVehiculo || that_present_idVehiculo) {
      if (!(this_present_idVehiculo && that_present_idVehiculo))
        return false;
      if (this.idVehiculo != that.idVehiculo)
        return false;
    }

    boolean this_present_marca = true && this.isSetMarca();
    boolean that_present_marca = true && that.isSetMarca();
    if (this_present_marca || that_present_marca) {
      if (!(this_present_marca && that_present_marca))
        return false;
      if (!this.marca.equals(that.marca))
        return false;
    }

    boolean this_present_modelo = true && this.isSetModelo();
    boolean that_present_modelo = true && that.isSetModelo();
    if (this_present_modelo || that_present_modelo) {
      if (!(this_present_modelo && that_present_modelo))
        return false;
      if (!this.modelo.equals(that.modelo))
        return false;
    }

    boolean this_present_anio = true;
    boolean that_present_anio = true;
    if (this_present_anio || that_present_anio) {
      if (!(this_present_anio && that_present_anio))
        return false;
      if (this.anio != that.anio)
        return false;
    }

    boolean this_present_color = true && this.isSetColor();
    boolean that_present_color = true && that.isSetColor();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    boolean this_present_nombreAseguradora = true && this.isSetNombreAseguradora();
    boolean that_present_nombreAseguradora = true && that.isSetNombreAseguradora();
    if (this_present_nombreAseguradora || that_present_nombreAseguradora) {
      if (!(this_present_nombreAseguradora && that_present_nombreAseguradora))
        return false;
      if (!this.nombreAseguradora.equals(that.nombreAseguradora))
        return false;
    }

    boolean this_present_numPoliza = true && this.isSetNumPoliza();
    boolean that_present_numPoliza = true && that.isSetNumPoliza();
    if (this_present_numPoliza || that_present_numPoliza) {
      if (!(this_present_numPoliza && that_present_numPoliza))
        return false;
      if (!this.numPoliza.equals(that.numPoliza))
        return false;
    }

    boolean this_present_placa = true && this.isSetPlaca();
    boolean that_present_placa = true && that.isSetPlaca();
    if (this_present_placa || that_present_placa) {
      if (!(this_present_placa && that_present_placa))
        return false;
      if (!this.placa.equals(that.placa))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + idVehiculo;

    hashCode = hashCode * 8191 + ((isSetMarca()) ? 131071 : 524287);
    if (isSetMarca())
      hashCode = hashCode * 8191 + marca.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelo()) ? 131071 : 524287);
    if (isSetModelo())
      hashCode = hashCode * 8191 + modelo.hashCode();

    hashCode = hashCode * 8191 + anio;

    hashCode = hashCode * 8191 + ((isSetColor()) ? 131071 : 524287);
    if (isSetColor())
      hashCode = hashCode * 8191 + color.hashCode();

    hashCode = hashCode * 8191 + ((isSetNombreAseguradora()) ? 131071 : 524287);
    if (isSetNombreAseguradora())
      hashCode = hashCode * 8191 + nombreAseguradora.hashCode();

    hashCode = hashCode * 8191 + ((isSetNumPoliza()) ? 131071 : 524287);
    if (isSetNumPoliza())
      hashCode = hashCode * 8191 + numPoliza.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlaca()) ? 131071 : 524287);
    if (isSetPlaca())
      hashCode = hashCode * 8191 + placa.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Vehiculo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIdVehiculo()).compareTo(other.isSetIdVehiculo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdVehiculo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idVehiculo, other.idVehiculo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMarca()).compareTo(other.isSetMarca());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarca()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marca, other.marca);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelo()).compareTo(other.isSetModelo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelo, other.modelo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnio()).compareTo(other.isSetAnio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anio, other.anio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNombreAseguradora()).compareTo(other.isSetNombreAseguradora());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNombreAseguradora()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombreAseguradora, other.nombreAseguradora);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumPoliza()).compareTo(other.isSetNumPoliza());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumPoliza()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPoliza, other.numPoliza);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlaca()).compareTo(other.isSetPlaca());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlaca()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.placa, other.placa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Vehiculo(");
    boolean first = true;

    sb.append("idVehiculo:");
    sb.append(this.idVehiculo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marca:");
    if (this.marca == null) {
      sb.append("null");
    } else {
      sb.append(this.marca);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelo:");
    if (this.modelo == null) {
      sb.append("null");
    } else {
      sb.append(this.modelo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("anio:");
    sb.append(this.anio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("color:");
    if (this.color == null) {
      sb.append("null");
    } else {
      sb.append(this.color);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nombreAseguradora:");
    if (this.nombreAseguradora == null) {
      sb.append("null");
    } else {
      sb.append(this.nombreAseguradora);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numPoliza:");
    if (this.numPoliza == null) {
      sb.append("null");
    } else {
      sb.append(this.numPoliza);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("placa:");
    if (this.placa == null) {
      sb.append("null");
    } else {
      sb.append(this.placa);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VehiculoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public VehiculoStandardScheme getScheme() {
      return new VehiculoStandardScheme();
    }
  }

  private static class VehiculoStandardScheme extends org.apache.thrift.scheme.StandardScheme<Vehiculo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Vehiculo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_VEHICULO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idVehiculo = iprot.readI32();
              struct.setIdVehiculoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MARCA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marca = iprot.readString();
              struct.setMarcaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODELO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelo = iprot.readString();
              struct.setModeloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANIO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.anio = iprot.readI32();
              struct.setAnioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.color = iprot.readString();
              struct.setColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOMBRE_ASEGURADORA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nombreAseguradora = iprot.readString();
              struct.setNombreAseguradoraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_POLIZA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numPoliza = iprot.readString();
              struct.setNumPolizaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLACA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.placa = iprot.readString();
              struct.setPlacaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Vehiculo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_VEHICULO_FIELD_DESC);
      oprot.writeI32(struct.idVehiculo);
      oprot.writeFieldEnd();
      if (struct.marca != null) {
        oprot.writeFieldBegin(MARCA_FIELD_DESC);
        oprot.writeString(struct.marca);
        oprot.writeFieldEnd();
      }
      if (struct.modelo != null) {
        oprot.writeFieldBegin(MODELO_FIELD_DESC);
        oprot.writeString(struct.modelo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ANIO_FIELD_DESC);
      oprot.writeI32(struct.anio);
      oprot.writeFieldEnd();
      if (struct.color != null) {
        oprot.writeFieldBegin(COLOR_FIELD_DESC);
        oprot.writeString(struct.color);
        oprot.writeFieldEnd();
      }
      if (struct.nombreAseguradora != null) {
        oprot.writeFieldBegin(NOMBRE_ASEGURADORA_FIELD_DESC);
        oprot.writeString(struct.nombreAseguradora);
        oprot.writeFieldEnd();
      }
      if (struct.numPoliza != null) {
        oprot.writeFieldBegin(NUM_POLIZA_FIELD_DESC);
        oprot.writeString(struct.numPoliza);
        oprot.writeFieldEnd();
      }
      if (struct.placa != null) {
        oprot.writeFieldBegin(PLACA_FIELD_DESC);
        oprot.writeString(struct.placa);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VehiculoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public VehiculoTupleScheme getScheme() {
      return new VehiculoTupleScheme();
    }
  }

  private static class VehiculoTupleScheme extends org.apache.thrift.scheme.TupleScheme<Vehiculo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Vehiculo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIdVehiculo()) {
        optionals.set(0);
      }
      if (struct.isSetMarca()) {
        optionals.set(1);
      }
      if (struct.isSetModelo()) {
        optionals.set(2);
      }
      if (struct.isSetAnio()) {
        optionals.set(3);
      }
      if (struct.isSetColor()) {
        optionals.set(4);
      }
      if (struct.isSetNombreAseguradora()) {
        optionals.set(5);
      }
      if (struct.isSetNumPoliza()) {
        optionals.set(6);
      }
      if (struct.isSetPlaca()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetIdVehiculo()) {
        oprot.writeI32(struct.idVehiculo);
      }
      if (struct.isSetMarca()) {
        oprot.writeString(struct.marca);
      }
      if (struct.isSetModelo()) {
        oprot.writeString(struct.modelo);
      }
      if (struct.isSetAnio()) {
        oprot.writeI32(struct.anio);
      }
      if (struct.isSetColor()) {
        oprot.writeString(struct.color);
      }
      if (struct.isSetNombreAseguradora()) {
        oprot.writeString(struct.nombreAseguradora);
      }
      if (struct.isSetNumPoliza()) {
        oprot.writeString(struct.numPoliza);
      }
      if (struct.isSetPlaca()) {
        oprot.writeString(struct.placa);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Vehiculo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.idVehiculo = iprot.readI32();
        struct.setIdVehiculoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.marca = iprot.readString();
        struct.setMarcaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modelo = iprot.readString();
        struct.setModeloIsSet(true);
      }
      if (incoming.get(3)) {
        struct.anio = iprot.readI32();
        struct.setAnioIsSet(true);
      }
      if (incoming.get(4)) {
        struct.color = iprot.readString();
        struct.setColorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nombreAseguradora = iprot.readString();
        struct.setNombreAseguradoraIsSet(true);
      }
      if (incoming.get(6)) {
        struct.numPoliza = iprot.readString();
        struct.setNumPolizaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.placa = iprot.readString();
        struct.setPlacaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-16")
public class Conductor implements org.apache.thrift.TBase<Conductor, Conductor._Fields>, java.io.Serializable, Cloneable, Comparable<Conductor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Conductor");

  private static final org.apache.thrift.protocol.TField ID_CONDUCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("idConductor", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FECHA_NACIMIENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("fechaNacimiento", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_LICENCIA_FIELD_DESC = new org.apache.thrift.protocol.TField("numLicencia", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TELEFONO_FIELD_DESC = new org.apache.thrift.protocol.TField("telefono", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRASENA_FIELD_DESC = new org.apache.thrift.protocol.TField("contrasena", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConductorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConductorTupleSchemeFactory();

  public int idConductor; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String nombre; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fechaNacimiento; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String numLicencia; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String telefono; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String contrasena; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_CONDUCTOR((short)1, "idConductor"),
    NOMBRE((short)2, "nombre"),
    FECHA_NACIMIENTO((short)3, "fechaNacimiento"),
    NUM_LICENCIA((short)4, "numLicencia"),
    TELEFONO((short)5, "telefono"),
    CONTRASENA((short)6, "contrasena"),
    TOKEN((short)7, "token");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_CONDUCTOR
          return ID_CONDUCTOR;
        case 2: // NOMBRE
          return NOMBRE;
        case 3: // FECHA_NACIMIENTO
          return FECHA_NACIMIENTO;
        case 4: // NUM_LICENCIA
          return NUM_LICENCIA;
        case 5: // TELEFONO
          return TELEFONO;
        case 6: // CONTRASENA
          return CONTRASENA;
        case 7: // TOKEN
          return TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDCONDUCTOR_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_CONDUCTOR, new org.apache.thrift.meta_data.FieldMetaData("idConductor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FECHA_NACIMIENTO, new org.apache.thrift.meta_data.FieldMetaData("fechaNacimiento", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_LICENCIA, new org.apache.thrift.meta_data.FieldMetaData("numLicencia", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEFONO, new org.apache.thrift.meta_data.FieldMetaData("telefono", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRASENA, new org.apache.thrift.meta_data.FieldMetaData("contrasena", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Conductor.class, metaDataMap);
  }

  public Conductor() {
  }

  public Conductor(
    int idConductor,
    java.lang.String nombre,
    java.lang.String fechaNacimiento,
    java.lang.String numLicencia,
    java.lang.String telefono,
    java.lang.String contrasena,
    java.lang.String token)
  {
    this();
    this.idConductor = idConductor;
    setIdConductorIsSet(true);
    this.nombre = nombre;
    this.fechaNacimiento = fechaNacimiento;
    this.numLicencia = numLicencia;
    this.telefono = telefono;
    this.contrasena = contrasena;
    this.token = token;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Conductor(Conductor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idConductor = other.idConductor;
    if (other.isSetNombre()) {
      this.nombre = other.nombre;
    }
    if (other.isSetFechaNacimiento()) {
      this.fechaNacimiento = other.fechaNacimiento;
    }
    if (other.isSetNumLicencia()) {
      this.numLicencia = other.numLicencia;
    }
    if (other.isSetTelefono()) {
      this.telefono = other.telefono;
    }
    if (other.isSetContrasena()) {
      this.contrasena = other.contrasena;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
  }

  public Conductor deepCopy() {
    return new Conductor(this);
  }

  @Override
  public void clear() {
    setIdConductorIsSet(false);
    this.idConductor = 0;
    this.nombre = null;
    this.fechaNacimiento = null;
    this.numLicencia = null;
    this.telefono = null;
    this.contrasena = null;
    this.token = null;
  }

  public int getIdConductor() {
    return this.idConductor;
  }

  public Conductor setIdConductor(int idConductor) {
    this.idConductor = idConductor;
    setIdConductorIsSet(true);
    return this;
  }

  public void unsetIdConductor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDCONDUCTOR_ISSET_ID);
  }

  /** Returns true if field idConductor is set (has been assigned a value) and false otherwise */
  public boolean isSetIdConductor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDCONDUCTOR_ISSET_ID);
  }

  public void setIdConductorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDCONDUCTOR_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNombre() {
    return this.nombre;
  }

  public Conductor setNombre(@org.apache.thrift.annotation.Nullable java.lang.String nombre) {
    this.nombre = nombre;
    return this;
  }

  public void unsetNombre() {
    this.nombre = null;
  }

  /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
  public boolean isSetNombre() {
    return this.nombre != null;
  }

  public void setNombreIsSet(boolean value) {
    if (!value) {
      this.nombre = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFechaNacimiento() {
    return this.fechaNacimiento;
  }

  public Conductor setFechaNacimiento(@org.apache.thrift.annotation.Nullable java.lang.String fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
    return this;
  }

  public void unsetFechaNacimiento() {
    this.fechaNacimiento = null;
  }

  /** Returns true if field fechaNacimiento is set (has been assigned a value) and false otherwise */
  public boolean isSetFechaNacimiento() {
    return this.fechaNacimiento != null;
  }

  public void setFechaNacimientoIsSet(boolean value) {
    if (!value) {
      this.fechaNacimiento = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNumLicencia() {
    return this.numLicencia;
  }

  public Conductor setNumLicencia(@org.apache.thrift.annotation.Nullable java.lang.String numLicencia) {
    this.numLicencia = numLicencia;
    return this;
  }

  public void unsetNumLicencia() {
    this.numLicencia = null;
  }

  /** Returns true if field numLicencia is set (has been assigned a value) and false otherwise */
  public boolean isSetNumLicencia() {
    return this.numLicencia != null;
  }

  public void setNumLicenciaIsSet(boolean value) {
    if (!value) {
      this.numLicencia = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTelefono() {
    return this.telefono;
  }

  public Conductor setTelefono(@org.apache.thrift.annotation.Nullable java.lang.String telefono) {
    this.telefono = telefono;
    return this;
  }

  public void unsetTelefono() {
    this.telefono = null;
  }

  /** Returns true if field telefono is set (has been assigned a value) and false otherwise */
  public boolean isSetTelefono() {
    return this.telefono != null;
  }

  public void setTelefonoIsSet(boolean value) {
    if (!value) {
      this.telefono = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContrasena() {
    return this.contrasena;
  }

  public Conductor setContrasena(@org.apache.thrift.annotation.Nullable java.lang.String contrasena) {
    this.contrasena = contrasena;
    return this;
  }

  public void unsetContrasena() {
    this.contrasena = null;
  }

  /** Returns true if field contrasena is set (has been assigned a value) and false otherwise */
  public boolean isSetContrasena() {
    return this.contrasena != null;
  }

  public void setContrasenaIsSet(boolean value) {
    if (!value) {
      this.contrasena = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public Conductor setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID_CONDUCTOR:
      if (value == null) {
        unsetIdConductor();
      } else {
        setIdConductor((java.lang.Integer)value);
      }
      break;

    case NOMBRE:
      if (value == null) {
        unsetNombre();
      } else {
        setNombre((java.lang.String)value);
      }
      break;

    case FECHA_NACIMIENTO:
      if (value == null) {
        unsetFechaNacimiento();
      } else {
        setFechaNacimiento((java.lang.String)value);
      }
      break;

    case NUM_LICENCIA:
      if (value == null) {
        unsetNumLicencia();
      } else {
        setNumLicencia((java.lang.String)value);
      }
      break;

    case TELEFONO:
      if (value == null) {
        unsetTelefono();
      } else {
        setTelefono((java.lang.String)value);
      }
      break;

    case CONTRASENA:
      if (value == null) {
        unsetContrasena();
      } else {
        setContrasena((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_CONDUCTOR:
      return getIdConductor();

    case NOMBRE:
      return getNombre();

    case FECHA_NACIMIENTO:
      return getFechaNacimiento();

    case NUM_LICENCIA:
      return getNumLicencia();

    case TELEFONO:
      return getTelefono();

    case CONTRASENA:
      return getContrasena();

    case TOKEN:
      return getToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_CONDUCTOR:
      return isSetIdConductor();
    case NOMBRE:
      return isSetNombre();
    case FECHA_NACIMIENTO:
      return isSetFechaNacimiento();
    case NUM_LICENCIA:
      return isSetNumLicencia();
    case TELEFONO:
      return isSetTelefono();
    case CONTRASENA:
      return isSetContrasena();
    case TOKEN:
      return isSetToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Conductor)
      return this.equals((Conductor)that);
    return false;
  }

  public boolean equals(Conductor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_idConductor = true;
    boolean that_present_idConductor = true;
    if (this_present_idConductor || that_present_idConductor) {
      if (!(this_present_idConductor && that_present_idConductor))
        return false;
      if (this.idConductor != that.idConductor)
        return false;
    }

    boolean this_present_nombre = true && this.isSetNombre();
    boolean that_present_nombre = true && that.isSetNombre();
    if (this_present_nombre || that_present_nombre) {
      if (!(this_present_nombre && that_present_nombre))
        return false;
      if (!this.nombre.equals(that.nombre))
        return false;
    }

    boolean this_present_fechaNacimiento = true && this.isSetFechaNacimiento();
    boolean that_present_fechaNacimiento = true && that.isSetFechaNacimiento();
    if (this_present_fechaNacimiento || that_present_fechaNacimiento) {
      if (!(this_present_fechaNacimiento && that_present_fechaNacimiento))
        return false;
      if (!this.fechaNacimiento.equals(that.fechaNacimiento))
        return false;
    }

    boolean this_present_numLicencia = true && this.isSetNumLicencia();
    boolean that_present_numLicencia = true && that.isSetNumLicencia();
    if (this_present_numLicencia || that_present_numLicencia) {
      if (!(this_present_numLicencia && that_present_numLicencia))
        return false;
      if (!this.numLicencia.equals(that.numLicencia))
        return false;
    }

    boolean this_present_telefono = true && this.isSetTelefono();
    boolean that_present_telefono = true && that.isSetTelefono();
    if (this_present_telefono || that_present_telefono) {
      if (!(this_present_telefono && that_present_telefono))
        return false;
      if (!this.telefono.equals(that.telefono))
        return false;
    }

    boolean this_present_contrasena = true && this.isSetContrasena();
    boolean that_present_contrasena = true && that.isSetContrasena();
    if (this_present_contrasena || that_present_contrasena) {
      if (!(this_present_contrasena && that_present_contrasena))
        return false;
      if (!this.contrasena.equals(that.contrasena))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + idConductor;

    hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
    if (isSetNombre())
      hashCode = hashCode * 8191 + nombre.hashCode();

    hashCode = hashCode * 8191 + ((isSetFechaNacimiento()) ? 131071 : 524287);
    if (isSetFechaNacimiento())
      hashCode = hashCode * 8191 + fechaNacimiento.hashCode();

    hashCode = hashCode * 8191 + ((isSetNumLicencia()) ? 131071 : 524287);
    if (isSetNumLicencia())
      hashCode = hashCode * 8191 + numLicencia.hashCode();

    hashCode = hashCode * 8191 + ((isSetTelefono()) ? 131071 : 524287);
    if (isSetTelefono())
      hashCode = hashCode * 8191 + telefono.hashCode();

    hashCode = hashCode * 8191 + ((isSetContrasena()) ? 131071 : 524287);
    if (isSetContrasena())
      hashCode = hashCode * 8191 + contrasena.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Conductor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIdConductor()).compareTo(other.isSetIdConductor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdConductor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idConductor, other.idConductor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNombre()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFechaNacimiento()).compareTo(other.isSetFechaNacimiento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFechaNacimiento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fechaNacimiento, other.fechaNacimiento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumLicencia()).compareTo(other.isSetNumLicencia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumLicencia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLicencia, other.numLicencia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTelefono()).compareTo(other.isSetTelefono());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelefono()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telefono, other.telefono);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContrasena()).compareTo(other.isSetContrasena());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContrasena()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contrasena, other.contrasena);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Conductor(");
    boolean first = true;

    sb.append("idConductor:");
    sb.append(this.idConductor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nombre:");
    if (this.nombre == null) {
      sb.append("null");
    } else {
      sb.append(this.nombre);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fechaNacimiento:");
    if (this.fechaNacimiento == null) {
      sb.append("null");
    } else {
      sb.append(this.fechaNacimiento);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLicencia:");
    if (this.numLicencia == null) {
      sb.append("null");
    } else {
      sb.append(this.numLicencia);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telefono:");
    if (this.telefono == null) {
      sb.append("null");
    } else {
      sb.append(this.telefono);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contrasena:");
    if (this.contrasena == null) {
      sb.append("null");
    } else {
      sb.append(this.contrasena);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConductorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConductorStandardScheme getScheme() {
      return new ConductorStandardScheme();
    }
  }

  private static class ConductorStandardScheme extends org.apache.thrift.scheme.StandardScheme<Conductor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Conductor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_CONDUCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idConductor = iprot.readI32();
              struct.setIdConductorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOMBRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nombre = iprot.readString();
              struct.setNombreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FECHA_NACIMIENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fechaNacimiento = iprot.readString();
              struct.setFechaNacimientoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_LICENCIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numLicencia = iprot.readString();
              struct.setNumLicenciaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TELEFONO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telefono = iprot.readString();
              struct.setTelefonoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRASENA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contrasena = iprot.readString();
              struct.setContrasenaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Conductor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_CONDUCTOR_FIELD_DESC);
      oprot.writeI32(struct.idConductor);
      oprot.writeFieldEnd();
      if (struct.nombre != null) {
        oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
        oprot.writeString(struct.nombre);
        oprot.writeFieldEnd();
      }
      if (struct.fechaNacimiento != null) {
        oprot.writeFieldBegin(FECHA_NACIMIENTO_FIELD_DESC);
        oprot.writeString(struct.fechaNacimiento);
        oprot.writeFieldEnd();
      }
      if (struct.numLicencia != null) {
        oprot.writeFieldBegin(NUM_LICENCIA_FIELD_DESC);
        oprot.writeString(struct.numLicencia);
        oprot.writeFieldEnd();
      }
      if (struct.telefono != null) {
        oprot.writeFieldBegin(TELEFONO_FIELD_DESC);
        oprot.writeString(struct.telefono);
        oprot.writeFieldEnd();
      }
      if (struct.contrasena != null) {
        oprot.writeFieldBegin(CONTRASENA_FIELD_DESC);
        oprot.writeString(struct.contrasena);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConductorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConductorTupleScheme getScheme() {
      return new ConductorTupleScheme();
    }
  }

  private static class ConductorTupleScheme extends org.apache.thrift.scheme.TupleScheme<Conductor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Conductor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIdConductor()) {
        optionals.set(0);
      }
      if (struct.isSetNombre()) {
        optionals.set(1);
      }
      if (struct.isSetFechaNacimiento()) {
        optionals.set(2);
      }
      if (struct.isSetNumLicencia()) {
        optionals.set(3);
      }
      if (struct.isSetTelefono()) {
        optionals.set(4);
      }
      if (struct.isSetContrasena()) {
        optionals.set(5);
      }
      if (struct.isSetToken()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetIdConductor()) {
        oprot.writeI32(struct.idConductor);
      }
      if (struct.isSetNombre()) {
        oprot.writeString(struct.nombre);
      }
      if (struct.isSetFechaNacimiento()) {
        oprot.writeString(struct.fechaNacimiento);
      }
      if (struct.isSetNumLicencia()) {
        oprot.writeString(struct.numLicencia);
      }
      if (struct.isSetTelefono()) {
        oprot.writeString(struct.telefono);
      }
      if (struct.isSetContrasena()) {
        oprot.writeString(struct.contrasena);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Conductor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.idConductor = iprot.readI32();
        struct.setIdConductorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nombre = iprot.readString();
        struct.setNombreIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fechaNacimiento = iprot.readString();
        struct.setFechaNacimientoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.numLicencia = iprot.readString();
        struct.setNumLicenciaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.telefono = iprot.readString();
        struct.setTelefonoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contrasena = iprot.readString();
        struct.setContrasenaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

